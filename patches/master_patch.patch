diff --git a/build/config/chrome_build.gni b/build/config/chrome_build.gni
index c649018a7a0aeb20caeb2bf37c60d57c48630f1b..3f14c8d49fc7c6b3e0ab0950a80ab09c1e3c004f 100644
--- a/build/config/chrome_build.gni
+++ b/build/config/chrome_build.gni
@@ -11,8 +11,11 @@ declare_args() {
   # Break chrome.dll into multple pieces based on process type. Only available
   # on Windows.
   is_multi_dll_chrome = is_win && !is_component_build
-}

+  # Build chromium without muon flags
+  muon_chromium_build = false
+}
+declare_args() {
 # Refers to the subdirectory for branding in various places including
 # chrome/app/theme.
 if (is_chrome_branded) {
@@ -20,3 +23,4 @@ if (is_chrome_branded) {
 } else {
   branding_path_component = "chromium"
 }
+}
diff --git a/build/toolchain/mac/BUILD.gn b/build/toolchain/mac/BUILD.gn
index b417e76a3b0b9d985f1442503b7b9fd93d6f2e0f..235a6bfcfbaaf80f53fe9db10ef2a5738bc8a174 100644
--- a/build/toolchain/mac/BUILD.gn
+++ b/build/toolchain/mac/BUILD.gn
@@ -245,13 +245,15 @@ template("mac_toolchain") {
     }

     tool("alink") {
+      rspfile = "{{output}}.rsp"
       script =
           rebase_path("//build/toolchain/mac/filter_libtool.py", root_build_dir)
-      command = "$env_wrapper rm -f {{output}} && TOOL_VERSION=${tool_versions.filter_libtool} python $script libtool -static {{arflags}} -o {{output}} {{inputs}}"
+      command = "$env_wrapper rm -f {{output}} && TOOL_VERSION=${tool_versions.filter_libtool} python $script libtool -static {{arflags}} -o {{output}} -filelist \"$rspfile\""
       description = "LIBTOOL-STATIC {{output}}"
       outputs = [
         "{{output_dir}}/{{target_output_name}}{{output_extension}}",
       ]
+      rspfile_content = "{{inputs_newline}}"
       default_output_dir = "{{target_out_dir}}"
       default_output_extension = ".a"
       output_prefix = "lib"
diff --git a/build/toolchain/win/BUILD.gn b/build/toolchain/win/BUILD.gn
index dd1017fb3d9f4f08d0b2f6fa34e1d307b228956f..36f974bedcb8d9b624f14f58c5f7dd06de20a35e 100644
--- a/build/toolchain/win/BUILD.gn
+++ b/build/toolchain/win/BUILD.gn
@@ -6,6 +6,7 @@ import("//build/config/clang/clang.gni")
 import("//build/config/compiler/compiler.gni")
 import("//build/config/sanitizers/sanitizers.gni")
 import("//build/config/win/visual_studio_version.gni")
+import("//build/toolchain/cc_wrapper.gni")
 import("//build/toolchain/goma.gni")
 import("//build/toolchain/toolchain.gni")

@@ -23,6 +24,8 @@ tool_wrapper_path = rebase_path("tool_wrapper.py", root_build_dir)

 if (use_goma) {
   goma_prefix = "$goma_dir/gomacc.exe "
+} else if (cc_wrapper != "") {
+  goma_prefix = "$cc_wrapper "
 } else {
   goma_prefix = ""
 }
diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index 9c0e2c5cde7e7ffa3eaed4478d1bad35cc380905..c9c3958f7c39a762faa7dc75be0be95a2b7bcc1b 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -34,6 +34,11 @@ if (is_android) {
   import("//build/util/version.gni")
   import("//media/cdm/ppapi/cdm_paths.gni")
   import("//third_party/icu/config.gni")
+  if (!muon_chromium_build) {
+    # Avoid mac app/framework naming conflicts
+    chrome_product_full_name = "Google Chrome"
+    chrome_product_short_name = "Google Chrome"
+  }
 }

 if (enable_resource_whitelist_generation) {
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index 7c663752f6ee5fb932194d25c9ed63bcd5beee6d..dd36aa4ab8da456d23d1b2b458b491e6fcb09068 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -3497,6 +3497,9 @@ split_static_library("browser") {
       "//device/battery",
       "//net:net_browser_services",
     ]
+    if (!muon_chromium_build) {
+      include_dirs = [ "//electron" ]
+    }
   }

   if (enable_pepper_cdms) {
diff --git a/chrome/browser/chrome_content_browser_manifest_overlay.json b/chrome/browser/chrome_content_browser_manifest_overlay.json
index 7444d5b35cdf9588b72239da790aecb22820b31c..48c95c8c9e7b8e413d94da711ad51d0ab40e159e 100644
--- a/chrome/browser/chrome_content_browser_manifest_overlay.json
+++ b/chrome/browser/chrome_content_browser_manifest_overlay.json
@@ -12,7 +12,7 @@
           "extensions::StashService",
           "metrics::mojom::LeakDetector",
           "mojom::ModuleEventSink",
-          "rappor::mojom::RapporRecorder",
+          // "rappor::mojom::RapporRecorder",
           "startup_metric_utils::mojom::StartupMetricHost",
           "translate::mojom::ContentTranslateDriver"
         ],
diff --git a/chrome/browser/extensions/api/messaging/message_service.cc b/chrome/browser/extensions/api/messaging/message_service.cc
index 56d2f39a8be535d78d72954f12a78f188010c6cd..5ddb40fbea05eb72125f7469ace0958cb859927e 100644
--- a/chrome/browser/extensions/api/messaging/message_service.cc
+++ b/chrome/browser/extensions/api/messaging/message_service.cc
@@ -8,6 +8,7 @@
 #include <limits>
 #include <utility>

+#include "atom/browser/extensions/tab_helper.h"
 #include "base/bind.h"
 #include "base/callback.h"
 #include "base/json/json_writer.h"
@@ -17,7 +18,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "build/build_config.h"
 #include "chrome/browser/extensions/api/messaging/extension_message_port.h"
-#include "chrome/browser/extensions/api/messaging/incognito_connectability.h"
 #include "chrome/browser/extensions/api/messaging/native_message_port.h"
 #include "chrome/browser/extensions/api/tabs/tabs_constants.h"
 #include "chrome/browser/extensions/extension_service.h"
@@ -171,6 +171,11 @@ namespace {
 static content::RenderProcessHost* GetExtensionProcess(
     BrowserContext* context,
     const std::string& extension_id) {
+  auto original = ExtensionsBrowserClient::Get()->GetOriginalContext(context);
+  // Always use the original context for non-private child contexts
+  if (!context->IsOffTheRecord()) {
+    context = original;
+  }
   scoped_refptr<SiteInstance> site_instance =
       ProcessManager::Get(context)->GetSiteInstanceForURL(
           Extension::GetBaseURLFromExtensionId(extension_id));
@@ -298,9 +303,7 @@ void MessageService::OpenChannelToExtension(
     // Only the tab id is useful to platform apps for internal use. The
     // unnecessary bits will be stripped out in
     // MessagingBindings::DispatchOnConnect().
-    source_tab.reset(ExtensionTabUtil::CreateTabObject(source_contents)
-                         ->ToValue()
-                         .release());
+    source_tab.reset(extensions::TabHelper::CreateTabValue(source_contents));

     content::RenderFrameHost* rfh =
         content::RenderFrameHost::FromID(source_process_id, source_routing_id);
@@ -360,10 +363,10 @@ void MessageService::OpenChannelToExtension(
     }

     // This check may show a dialog.
-    IncognitoConnectability::Get(context)
-        ->Query(target_extension, source_contents, source_url,
-                base::Bind(&MessageService::OnOpenChannelAllowed,
-                           weak_factory_.GetWeakPtr(), base::Passed(&params)));
+    // IncognitoConnectability::Get(context)
+    //     ->Query(target_extension, source_contents, source_url,
+    //             base::Bind(&MessageService::OnOpenChannelAllowed,
+    //                        weak_factory_.GetWeakPtr(), base::Passed(&params)));
     return;
   }

diff --git a/chrome/browser/memory/tab_manager.cc b/chrome/browser/memory/tab_manager.cc
index b689350325b807a0276cac709e4e4fa3d2054980..f16ba67996a7091d87d7de9ad71de63182015780 100644
--- a/chrome/browser/memory/tab_manager.cc
+++ b/chrome/browser/memory/tab_manager.cc
@@ -657,7 +657,8 @@ void TabManager::AddTabStats(const TabStripModel* model,
                              TabStatsList* stats_list) const {
   for (int i = 0; i < model->count(); i++) {
     WebContents* contents = model->GetWebContentsAt(i);
-    if (!contents->IsCrashed()) {
+    // TODO(bridiver) - temporary workaround for pinned and unloaded tabs
+    if (contents && !contents->IsCrashed()) {
       TabStats stats;
       stats.is_app = is_app;
       stats.is_internal_page = IsInternalPage(contents->GetLastCommittedURL());
@@ -789,6 +790,17 @@ void TabManager::PurgeAndSuspendBackgroundedTabs() {
   }
 }

+// MUON(bridiver): see tab_manager.h
+WebContents* TabManager::CreateNullContents(
+    TabStripModel* model, WebContents* old_contents) {
+  return WebContents::Create(WebContents::CreateParams(model->profile()));
+}
+
+// MUON(bridiver): see tab_manager.h
+void TabManager::DestroyOldContents(WebContents* old_contents) {
+  delete old_contents;
+}
+
 WebContents* TabManager::DiscardWebContentsAt(int index, TabStripModel* model) {
   // Can't discard active index.
   if (model->active_index() == index)
@@ -808,8 +820,8 @@ WebContents* TabManager::DiscardWebContentsAt(int index, TabStripModel* model) {
       "TabManager.Discarding.DiscardedTabHasBeforeUnloadHandler",
       old_contents->NeedToFireBeforeUnload());

-  WebContents* null_contents =
-      WebContents::Create(WebContents::CreateParams(model->profile()));
+  // MUON(bridiver): see tab_manager.h
+  WebContents* null_contents = CreateNullContents(model, old_contents);
   // Copy over the state from the navigation controller to preserve the
   // back/forward history and to continue to display the correct title/favicon.
   null_contents->GetController().CopyStateFrom(old_contents->GetController());
@@ -829,7 +841,8 @@ WebContents* TabManager::DiscardWebContentsAt(int index, TabStripModel* model) {
   // TODO(jamescook): This breaks script connections with other tabs.
   // Find a different approach that doesn't do that, perhaps based on navigation
   // to swappedout://.
-  delete old_contents;
+  // MUON(bridiver): see tab_manager.h
+  DestroyOldContents(old_contents);
   recent_tab_discard_ = true;

   return null_contents;
diff --git a/chrome/browser/memory/tab_manager.h b/chrome/browser/memory/tab_manager.h
index c384b7e054b07fa3eb20ad6b794bd748fcaf5665..22ca673c3e9a82d3dfa4a6e95a9cf74434fa0620 100644
--- a/chrome/browser/memory/tab_manager.h
+++ b/chrome/browser/memory/tab_manager.h
@@ -73,6 +73,11 @@ class TabManager : public TabStripModelObserver {
   TabManager();
   ~TabManager() override;

+  // MUON(bridiver): override to create/destroy guests webcontents
+  virtual content::WebContents* CreateNullContents(
+      TabStripModel* model, content::WebContents* old_contents);
+  virtual void DestroyOldContents(content::WebContents* old_contents);
+
   // Number of discard events since Chrome started.
   int discard_count() const { return discard_count_; }
 
@@ -187,6 +192,7 @@ class TabManager : public TabStripModelObserver {
   // This is needed so WebContentsData can call OnDiscardedStateChange, and
   // can use PurgeAndSuspendState.
   friend class WebContentsData;
+  friend class GuestTabManager;
 
   // Called by WebContentsData whenever the discard state of a WebContents
   // changes, so that observers can be informed.
diff --git a/chrome/browser/password_manager/password_store_factory.cc b/chrome/browser/password_manager/password_store_factory.cc
index 65020c1482d1979332f48f08fef99edfc6117cda..043fba96fc0c7c4b35fff4ad2b7b935e7e8950ac 100644
--- a/chrome/browser/password_manager/password_store_factory.cc
+++ b/chrome/browser/password_manager/password_store_factory.cc
@@ -84,22 +84,22 @@ PasswordStoreFactory* PasswordStoreFactory::GetInstance() {
 }
 
 // static
-void PasswordStoreFactory::OnPasswordsSyncedStatePotentiallyChanged(
-    Profile* profile) {
-  scoped_refptr<PasswordStore> password_store =
-      GetForProfile(profile, ServiceAccessType::EXPLICIT_ACCESS);
-  if (!password_store)
-    return;
-  syncer::SyncService* sync_service =
-      ProfileSyncServiceFactory::GetInstance()->GetForProfile(profile);
-  net::URLRequestContextGetter* request_context_getter =
-      profile->GetRequestContext();
+// void PasswordStoreFactory::OnPasswordsSyncedStatePotentiallyChanged(
+//     Profile* profile) {
+//   scoped_refptr<PasswordStore> password_store =
+//       GetForProfile(profile, ServiceAccessType::EXPLICIT_ACCESS);
+//   if (!password_store)
+//     return;
+//   syncer::SyncService* sync_service =
+//       ProfileSyncServiceFactory::GetInstance()->GetForProfile(profile);
+//   net::URLRequestContextGetter* request_context_getter =
+//       profile->GetRequestContext();
 
-  password_manager::ToggleAffiliationBasedMatchingBasedOnPasswordSyncedState(
-      password_store.get(), sync_service, request_context_getter,
-      profile->GetPath(), content::BrowserThread::GetTaskRunnerForThread(
-                              content::BrowserThread::DB));
-}
+//   password_manager::ToggleAffiliationBasedMatchingBasedOnPasswordSyncedState(
+//       password_store.get(), sync_service, request_context_getter,
+//       profile->GetPath(), content::BrowserThread::GetTaskRunnerForThread(
+//                               content::BrowserThread::DB));
+// }
 
 // static
 void PasswordStoreFactory::TrimOrDeleteAffiliationCache(Profile* profile) {
@@ -115,7 +115,7 @@ PasswordStoreFactory::PasswordStoreFactory()
     : RefcountedBrowserContextKeyedServiceFactory(
           "PasswordStore",
           BrowserContextDependencyManager::GetInstance()) {
-  DependsOn(WebDataServiceFactory::GetInstance());
+  // DependsOn(WebDataServiceFactory::GetInstance());
 }
 
 PasswordStoreFactory::~PasswordStoreFactory() {}
@@ -163,8 +163,7 @@ PasswordStoreFactory::BuildServiceInstanceFor(
 #if defined(OS_WIN)
   ps = new PasswordStoreWin(main_thread_runner, db_thread_runner,
                             std::move(login_db),
-                            WebDataServiceFactory::GetPasswordWebDataForProfile(
-                                profile, ServiceAccessType::EXPLICIT_ACCESS));
+                            profile->GetPasswordWebdataService());
 #elif defined(OS_MACOSX)
   std::unique_ptr<crypto::AppleKeychain> keychain(
       base::CommandLine::ForCurrentProcess()->HasSwitch(
@@ -260,8 +259,10 @@ PasswordStoreFactory::BuildServiceInstanceFor(
   NOTIMPLEMENTED();
 #endif
   DCHECK(ps);
+  base::Callback<void(syncer::ModelType)> fake_flare;
   if (!ps->Init(
-          sync_start_util::GetFlareForSyncableService(profile->GetPath()))) {
+          // sync_start_util::GetFlareForSyncableService(profile->GetPath()))) {
+          fake_flare)) {
     // TODO(crbug.com/479725): Remove the LOG once this error is visible in the
     // UI.
     LOG(WARNING) << "Could not initialize password store.";
diff --git a/chrome/browser/password_manager/password_store_factory.h b/chrome/browser/password_manager/password_store_factory.h
index 6c0df549de154e877dabe1c8b77ac4fa2a990154..6b527b1d8bec106f7521e1bbf37e08f47d06bb26 100644
--- a/chrome/browser/password_manager/password_store_factory.h
+++ b/chrome/browser/password_manager/password_store_factory.h
@@ -44,7 +44,7 @@ class PasswordStoreFactory
 
   // Called by the PasswordDataTypeController whenever there is a possibility
   // that syncing passwords has just started or ended for |profile|.
-  static void OnPasswordsSyncedStatePotentiallyChanged(Profile* profile);
+  // static void OnPasswordsSyncedStatePotentiallyChanged(Profile* profile);
 
   // Trims the affiliation cache for |profile| if affiliation-based matching is
   // enabled, and completely deletes it otherwise.
diff --git a/chrome/browser/printing/print_view_manager_base.cc b/chrome/browser/printing/print_view_manager_base.cc
index df471305c8f649bf4f16837138007be6aedf2d9e..32645b5f9c2b6356f3c2e25f09a321c33e299447 100644
--- a/chrome/browser/printing/print_view_manager_base.cc
+++ b/chrome/browser/printing/print_view_manager_base.cc
@@ -58,13 +58,13 @@ namespace {

 void ShowWarningMessageBox(const base::string16& message) {
   // Runs always on the UI thread.
-  static bool is_dialog_shown = false;
-  if (is_dialog_shown)
-    return;
+  // static bool is_dialog_shown = false;
+  // if (is_dialog_shown)
+  //   return;
   // Block opening dialog from nested task.
-  base::AutoReset<bool> auto_reset(&is_dialog_shown, true);
+  // base::AutoReset<bool> auto_reset(&is_dialog_shown, true);

-  chrome::ShowWarningMessageBox(nullptr, base::string16(), message);
+  // chrome::ShowWarningMessageBox(nullptr, base::string16(), message);
 }

 }  // namespace
diff --git a/chrome/browser/renderer_host/chrome_extension_message_filter.cc b/chrome/browser/renderer_host/chrome_extension_message_filter.cc
index 0ba1d828cb9d63bb4430ebe14969a017c2e2343b..7b5a75a5f289d9886c31605605b4901cbfe6265a 100644
--- a/chrome/browser/renderer_host/chrome_extension_message_filter.cc
+++ b/chrome/browser/renderer_host/chrome_extension_message_filter.cc
@@ -16,10 +16,12 @@
 #include "base/task_scheduler/post_task.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/chrome_notification_types.h"
+#if 0
 #include "chrome/browser/extensions/activity_log/activity_action_constants.h"
 #include "chrome/browser/extensions/activity_log/activity_actions.h"
 #include "chrome/browser/extensions/activity_log/activity_log.h"
 #include "chrome/browser/extensions/api/activity_log_private/activity_log_private_api.h"
+#endif  // 0
 #include "chrome/browser/extensions/api/messaging/message_service.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_manager.h"
@@ -27,6 +29,7 @@
 #include "content/public/browser/notification_service.h"
 #include "content/public/browser/render_process_host.h"
 #include "extensions/browser/extension_system.h"
+#include "extensions/browser/info_map.h"
 #include "extensions/common/api/messaging/message.h"
 #include "extensions/common/extension_messages.h"
 #include "extensions/common/extension_set.h"
@@ -43,6 +46,7 @@ const uint32_t kFilteredMessageClasses[] = {
     ChromeExtensionMsgStart, ExtensionMsgStart,
 };

+#if 0
 // Logs an action to the extension activity log for the specified profile.
 void AddActionToExtensionActivityLog(Profile* profile,
                                      extensions::ActivityLog* activity_log,
@@ -55,6 +59,7 @@ void AddActionToExtensionActivityLog(Profile* profile,
     action->set_page_incognito(profile->IsOffTheRecord());
   activity_log->LogAction(action);
 }
+#endif  // 0

 }  // namespace

@@ -65,7 +70,7 @@ ChromeExtensionMessageFilter::ChromeExtensionMessageFilter(
                            arraysize(kFilteredMessageClasses)),
       render_process_id_(render_process_id),
       profile_(profile),
-      activity_log_(extensions::ActivityLog::GetInstance(profile)),
+      // activity_log_(extensions::ActivityLog::GetInstance(profile)),
       extension_info_map_(
           extensions::ExtensionSystem::Get(profile)->info_map()) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
@@ -92,12 +97,14 @@ bool ChromeExtensionMessageFilter::OnMessageReceived(
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_PostMessage, OnPostMessage)
     IPC_MESSAGE_HANDLER_DELAY_REPLY(ExtensionHostMsg_GetMessageBundle,
                                     OnGetExtMessageBundle)
+#if 0
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddAPIActionToActivityLog,
                         OnAddAPIActionToExtensionActivityLog);
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddDOMActionToActivityLog,
                         OnAddDOMActionToExtensionActivityLog);
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddEventToActivityLog,
                         OnAddEventToExtensionActivityLog);
+#endif  // 0
     IPC_MESSAGE_UNHANDLED(handled = false)
   IPC_END_MESSAGE_MAP()

@@ -113,9 +120,11 @@ void ChromeExtensionMessageFilter::OverrideThreadForMessage(
     case ExtensionHostMsg_OpenMessagePort::ID:
     case ExtensionHostMsg_CloseMessagePort::ID:
     case ExtensionHostMsg_PostMessage::ID:
+#if 0
     case ExtensionHostMsg_AddAPIActionToActivityLog::ID:
     case ExtensionHostMsg_AddDOMActionToActivityLog::ID:
     case ExtensionHostMsg_AddEventToActivityLog::ID:
+#endif  // 0
       *thread = BrowserThread::UI;
       break;
     default:
@@ -266,6 +275,7 @@ void ChromeExtensionMessageFilter::OnGetExtMessageBundleAsync(
   Send(reply_msg);
 }

+#if 0
 void ChromeExtensionMessageFilter::OnAddAPIActionToExtensionActivityLog(
     const std::string& extension_id,
     const ExtensionHostMsg_APIActionOrEvent_Params& params) {
@@ -316,6 +326,7 @@ void ChromeExtensionMessageFilter::OnAddEventToExtensionActivityLog(
   }
   AddActionToExtensionActivityLog(profile_, activity_log_, action);
 }
+#endif  // 0

 void ChromeExtensionMessageFilter::Observe(
     int type,
@@ -323,7 +334,7 @@ void ChromeExtensionMessageFilter::Observe(
     const content::NotificationDetails& details) {
   DCHECK_EQ(chrome::NOTIFICATION_PROFILE_DESTROYED, type);
   profile_ = NULL;
-  activity_log_ = nullptr;
+  // activity_log_ = nullptr;
 }

 bool ChromeExtensionMessageFilter::ShouldLogExtensionAction(
@@ -332,7 +343,8 @@ bool ChromeExtensionMessageFilter::ShouldLogExtensionAction(
   // conditions (e.g. logging gets disabled but the renderer sends the message
   // before it gets updated), we still need this check here.
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  return profile_ &&
-         g_browser_process->profile_manager()->IsValidProfile(profile_) &&
-         activity_log_ && activity_log_->ShouldLog(extension_id);
+  // return profile_ &&
+  //        g_browser_process->profile_manager()->IsValidProfile(profile_) &&
+  //        activity_log_ && activity_log_->ShouldLog(extension_id);
+  return false;
 }
diff --git a/chrome/browser/renderer_host/chrome_extension_message_filter.h b/chrome/browser/renderer_host/chrome_extension_message_filter.h
index 55568bd69be22628210cf5c1b61cc28b0c7187ac..32d3080cc9107c6a5131477141c0de46368965d3 100644
--- a/chrome/browser/renderer_host/chrome_extension_message_filter.h
+++ b/chrome/browser/renderer_host/chrome_extension_message_filter.h
@@ -76,6 +76,7 @@ class ChromeExtensionMessageFilter : public content::BrowserMessageFilter,
       const std::string& main_extension_id,
       const std::string& default_locale,
       IPC::Message* reply_msg);
+#if 0
   void OnAddAPIActionToExtensionActivityLog(
       const std::string& extension_id,
       const ExtensionHostMsg_APIActionOrEvent_Params& params);
@@ -88,6 +89,7 @@ class ChromeExtensionMessageFilter : public content::BrowserMessageFilter,
   void OnAddEventToExtensionActivityLog(
       const std::string& extension_id,
       const ExtensionHostMsg_APIActionOrEvent_Params& params);
+#endif  // 0

   // content::NotificationObserver implementation.
   void Observe(int type,
diff --git a/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc b/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
index 0da4a534c0adae8b0edd2ffeace9972ce3e63c6c..0d1f9efcb260f8c943ab24a4c23c14dbc23863b8 100644
--- a/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
+++ b/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
@@ -58,13 +58,13 @@ ChromeBrowserPepperHostFactory::CreateResourceHost(
         return std::unique_ptr<ResourceHost>(new MessageFilterHost(
             host_->GetPpapiHost(), instance, resource, pv_filter));
       }
-      case PpapiHostMsg_OutputProtection_Create::ID: {
-        scoped_refptr<ResourceMessageFilter> output_protection_filter(
-            new chrome::PepperOutputProtectionMessageFilter(host_, instance));
-        return std::unique_ptr<ResourceHost>(
-            new MessageFilterHost(host_->GetPpapiHost(), instance, resource,
-                                  output_protection_filter));
-      }
+      // case PpapiHostMsg_OutputProtection_Create::ID: {
+      //   scoped_refptr<ResourceMessageFilter> output_protection_filter(
+      //       new chrome::PepperOutputProtectionMessageFilter(host_, instance));
+      //   return std::unique_ptr<ResourceHost>(
+      //       new MessageFilterHost(host_->GetPpapiHost(), instance, resource,
+      //                             output_protection_filter));
+      // }
     }
   }

diff --git a/chrome/common/BUILD.gn b/chrome/common/BUILD.gn
index 856a1d44f12f408aeba38ee5502b26ec6eee5700..145fd3c0f5bf1a86fe92456f45fda912f9e4d29a 100644
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -435,6 +435,7 @@ static_library("common") {
       "importer/safari_importer_utils.h",
       "importer/safari_importer_utils.mm",
     ]
+    include_dirs = [ "//electron" ]
   }

   if (is_chromeos) {
@@ -533,6 +534,12 @@ static_library("common") {
     ]
     public_deps += [ "//chrome/common:version_header" ]
   }
+
+  if (!muon_chromium_build && enable_extensions) {
+    sources -= [
+      "extensions/chrome_extensions_client.cc",
+    ]
+  }
 }
 
 process_version("version_header") {
diff --git a/chrome/common/chrome_constants.cc b/chrome/common/chrome_constants.cc
index d480ff03f60e0380eea243910ea8c2aa13db949c..162071ea27a8abe0c6712aaf2f65913402bd6733 100644
--- a/chrome/common/chrome_constants.cc
+++ b/chrome/common/chrome_constants.cc
@@ -10,11 +10,11 @@
 #define FPL FILE_PATH_LITERAL

 #if defined(OS_MACOSX)
-#define CHROMIUM_PRODUCT_STRING "Chromium"
+#define CHROMIUM_PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #if defined(GOOGLE_CHROME_BUILD)
-#define PRODUCT_STRING "Google Chrome"
+#define PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #elif defined(CHROMIUM_BUILD)
-#define PRODUCT_STRING "Chromium"
+#define PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #else
 #error Unknown branding
 #endif
@@ -43,13 +43,13 @@ const char kChromeVersion[] = CHROME_VERSION_STRING;

 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kBrowserProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kHelperProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING);
@@ -61,7 +61,7 @@ const base::FilePath::CharType kHelperProcessExecutableName[] =
     FPL(PRODUCT_STRING " Helper");
 #elif defined(OS_ANDROID)
 // NOTE: Keep it synced with the process names defined in AndroidManifest.xml.
-const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("chrome");
+const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
     FPL("");
 const base::FilePath::CharType kHelperProcessExecutableName[] =
@@ -69,8 +69,8 @@ const base::FilePath::CharType kHelperProcessExecutableName[] =
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] = FPL("");
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL(EXECUTABLE_NAME);
 // Helper processes end up with a name of "exe" due to execing via
 // /proc/self/exe.  See bug 22703.
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
@@ -80,13 +80,13 @@ const base::FilePath::CharType kHelperProcessExecutableName[] = FPL("exe");

 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kBrowserProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kHelperProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING ".app/Contents/MacOS/" CHROMIUM_PRODUCT_STRING);
@@ -98,19 +98,19 @@ const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
 const base::FilePath::CharType kHelperProcessExecutablePath[] =
     FPL(PRODUCT_STRING " Helper.app/Contents/MacOS/" PRODUCT_STRING " Helper");
 #elif defined(OS_ANDROID)
-const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
-const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
+const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL(EXECUTABLE_NAME);
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 #endif  // OS_*

 #if defined(OS_MACOSX)
@@ -121,8 +121,8 @@ const base::FilePath::CharType kFrameworkExecutableName[] =
 #endif  // OS_MACOSX

 #if defined(OS_WIN)
-const base::FilePath::CharType kBrowserResourcesDll[] = FPL("chrome.dll");
-const base::FilePath::CharType kChromeElfDllName[] = FPL("chrome_elf.dll");
+const base::FilePath::CharType kBrowserResourcesDll[] = FPL("Brave.dll");
+const base::FilePath::CharType kChromeElfDllName[] = FPL("Brave_elf.dll");
 const base::FilePath::CharType kStatusTrayWindowClass[] =
     FPL("Chrome_StatusTrayWindow");
 #endif  // defined(OS_WIN)
diff --git a/chrome/common/chrome_paths_mac.mm b/chrome/common/chrome_paths_mac.mm
index d0bbbf72ff0e356e424dc280eeb1441c990b5770..8e96ea5706f87ea98ba55fcb583b16a8035fa903 100644
--- a/chrome/common/chrome_paths_mac.mm
+++ b/chrome/common/chrome_paths_mac.mm
@@ -41,7 +41,9 @@ NSBundle* OuterAppBundleInternal() {

   // From C.app/Contents/Versions/1.2.3.4, go up three steps to get to C.app.
   base::FilePath versioned_dir = chrome::GetVersionedDirectory();
-  base::FilePath outer_app_dir = versioned_dir.DirName().DirName().DirName();
+  // electron uses Frameworks in place of Versions/1.2.3.4
+  // TODO(bridiver) - change this to match chrome
+  base::FilePath outer_app_dir = versioned_dir.DirName().DirName();
   const char* outer_app_dir_c = outer_app_dir.value().c_str();
   NSString* outer_app_dir_ns = [NSString stringWithUTF8String:outer_app_dir_c];

diff --git a/chrome/common/chrome_utility_printing_messages.h b/chrome/common/chrome_utility_printing_messages.h
index f5712a7a5bb8fabf279088631141cad405c8be8d..da8ff4065d721d49c1ca443a5c64c45e9f59ca4d 100644
--- a/chrome/common/chrome_utility_printing_messages.h
+++ b/chrome/common/chrome_utility_printing_messages.h
@@ -26,7 +26,6 @@
 #define IPC_MESSAGE_START ChromeUtilityPrintingMsgStart

 // Preview and Cloud Print messages.
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 IPC_ENUM_TRAITS_MAX_VALUE(printing::PdfRenderSettings::Mode,
                           printing::PdfRenderSettings::Mode::LAST)

@@ -44,6 +43,7 @@ IPC_STRUCT_TRAITS_BEGIN(printing::PrinterCapsAndDefaults)
   IPC_STRUCT_TRAITS_MEMBER(printer_defaults)
   IPC_STRUCT_TRAITS_MEMBER(defaults_mime_type)
 IPC_STRUCT_TRAITS_END()
+#if BUILDFLAG(ENABLE_PRINT_PREVIEW)

 IPC_ENUM_TRAITS_MAX_VALUE(printing::ColorModel, printing::PROCESSCOLORMODEL_RGB)

diff --git a/chrome/common/chrome_version.h.in b/chrome/common/chrome_version.h.in
index f0a0bcd0098ec31b18bb00588ad8fd11b439fd6f..888572f87a71e6e8444bd6a302343e453aef4287 100644
--- a/chrome/common/chrome_version.h.in
+++ b/chrome/common/chrome_version.h.in
@@ -22,3 +22,5 @@
 // Changelist Information

 #define LASTCHANGE_STRING "@LASTCHANGE@"
+
+#define EXECUTABLE_NAME "@EXECUTABLE_NAME@"
diff --git a/chrome/common/importer/BUILD.gn b/chrome/common/importer/BUILD.gn
index 905bddcd622791be18efafe41dcf86a52578d92e..47922ee7575a64b6afd95b5082015e5336b1cc4e 100644
--- a/chrome/common/importer/BUILD.gn
+++ b/chrome/common/importer/BUILD.gn
@@ -14,4 +14,6 @@ mojom("interfaces") {
     "//mojo/common:common_custom_types",
     "//url/mojo:url_mojom_gurl",
   ]
+
+  import_dirs = [ "//electron" ]
 }
diff --git a/chrome/common/importer/edge_importer_utils_win.cc b/chrome/common/importer/edge_importer_utils_win.cc
index c2abd64b2d7c5166c1fdbaaf782974cb4bcc5e53..eb59bbe098dabd0edd3d9d8e24befe1006e56b8b 100644
--- a/chrome/common/importer/edge_importer_utils_win.cc
+++ b/chrome/common/importer/edge_importer_utils_win.cc
@@ -73,7 +73,9 @@ bool IsEdgeFavoritesLegacyMode() {
   // for its favorites.
   if (key.ReadValueDW(L"FavoritesESEEnabled", &ese_enabled) == ERROR_SUCCESS)
     return !ese_enabled;
-  return true;
+  // return true;
+  // No value to read means not legacy mode
+  return false;
 }

 bool EdgeImporterCanImport() {
diff --git a/chrome/common/importer/importer_bridge.h b/chrome/common/importer/importer_bridge.h
index 56d4259aba433df997802109cf5a8d28c03ebd13..c7542923071f28e4077727a9b494bf56e4debf8f 100644
--- a/chrome/common/importer/importer_bridge.h
+++ b/chrome/common/importer/importer_bridge.h
@@ -24,6 +24,8 @@ namespace autofill {
 struct PasswordForm;
 }

+struct ImportedCookieEntry;
+
 namespace importer {
 #if defined(OS_WIN)
 struct ImporterIE7PasswordInfo;
@@ -66,6 +68,8 @@ class ImporterBridge : public base::RefCountedThreadSafe<ImporterBridge> {
   virtual void SetAutofillFormData(
       const std::vector<ImporterAutofillFormDataEntry>& entries) = 0;

+  virtual void SetCookies(const std::vector<ImportedCookieEntry>& cookies) = 0;
+
   // Notifies the coordinator that the import operation has begun.
   virtual void NotifyStarted() = 0;

diff --git a/chrome/common/importer/importer_data_types.h b/chrome/common/importer/importer_data_types.h
index 0fc90c62398a93eb89568ce78c8ded2bc9b232b6..50a7d3c0079b7e9c5bc38a4ae3b25eef6d024169 100644
--- a/chrome/common/importer/importer_data_types.h
+++ b/chrome/common/importer/importer_data_types.h
@@ -83,6 +83,7 @@ enum VisitSource {
   VISIT_SOURCE_FIREFOX_IMPORTED = 1,
   VISIT_SOURCE_IE_IMPORTED = 2,
   VISIT_SOURCE_SAFARI_IMPORTED = 3,
+  VISIT_SOURCE_CHROME_IMPORTED = 4,
 };

 }  // namespace importer
diff --git a/chrome/common/importer/importer_type.h b/chrome/common/importer/importer_type.h
index c172f8a5bc534465ff4d063a52f9bb510b7e36af..437026ae26eec5dce80edb73929a0fbce870cc37 100644
--- a/chrome/common/importer/importer_type.h
+++ b/chrome/common/importer/importer_type.h
@@ -19,6 +19,8 @@ enum ImporterType {
   TYPE_IE              = 0,
 #endif
   // Value 1 was the (now deleted) Firefox 2 profile importer.
+  // We use it for chrome profile now.
+  TYPE_CHROME          = 1,
   TYPE_FIREFOX         = 2,
 #if defined(OS_MACOSX)
   TYPE_SAFARI          = 3,
diff --git a/chrome/common/importer/profile_import.mojom b/chrome/common/importer/profile_import.mojom
index f366a941273f0807405743f1365fdaf3a549cddc..35d5a90c778adfa67597866c31a91bc79dad3ab6 100644
--- a/chrome/common/importer/profile_import.mojom
+++ b/chrome/common/importer/profile_import.mojom
@@ -16,6 +16,9 @@ struct ImportedBookmarkEntry;
 struct ImporterAutofillFormDataEntry;

 [Native]
+struct ImportedCookieEntry;
+
+[Native]
 struct SearchEngineInfo;

 [Native]
@@ -63,6 +66,8 @@ interface ProfileImportObserver {
   OnAutofillFormDataImportStart(uint32 total_autofill_form_data_entry_count);
   OnAutofillFormDataImportGroup(
       array<ImporterAutofillFormDataEntry> autofill_form_data_entry_group);
+  OnCookiesImportStart(uint32 total_cookies_count);
+  OnCookiesImportGroup(array<ImportedCookieEntry> cookies_group);
   // Windows only:
   OnIE7PasswordReceived(ImporterIE7PasswordInfo importer_password_info);
 };
diff --git a/chrome/common/importer/profile_import.typemap b/chrome/common/importer/profile_import.typemap
index 6283f2bf6871a10f710694772b5da0bc9b70c2ad..263c6f5914079cfe9f16baff9a1f9274453fc37f 100644
--- a/chrome/common/importer/profile_import.typemap
+++ b/chrome/common/importer/profile_import.typemap
@@ -9,6 +9,7 @@ public_headers = [
   "//chrome/common/importer/importer_data_types.h",
   "//chrome/common/importer/importer_url_row.h",
   "//components/favicon_base/favicon_usage_data.h",
+  "//electron/brave/common/importer/imported_cookie_entry.h",
 ]
 traits_headers =
     [ "//chrome/common/importer/profile_import_process_param_traits.h" ]
@@ -16,6 +17,7 @@ deps = [
   "//chrome/common",
   "//components/favicon_base",
   "//ipc",
+  "//electron:common",
 ]
 type_mappings = [
   "chrome.mojom.FaviconUsageDataList=::favicon_base::FaviconUsageDataList",
@@ -26,4 +28,5 @@ type_mappings = [
   "chrome.mojom.SearchEngineInfo=::importer::SearchEngineInfo",
   "chrome.mojom.SourceProfile=::importer::SourceProfile",
   "chrome.mojom.ImportItem=::importer::ImportItem",
+  "chrome.mojom.ImportedCookieEntry=::ImportedCookieEntry",
 ]
diff --git a/chrome/common/importer/profile_import_process_param_traits_macros.h b/chrome/common/importer/profile_import_process_param_traits_macros.h
index eb4b00d6ed6af19c4fc998e81dab735db63484e9..152b643afe66ccda1644fcff4e2a976e4a83174b 100644
--- a/chrome/common/importer/profile_import_process_param_traits_macros.h
+++ b/chrome/common/importer/profile_import_process_param_traits_macros.h
@@ -13,6 +13,7 @@

 #include "base/strings/string16.h"
 #include "base/values.h"
+#include "brave/common/importer/imported_cookie_entry.h"
 #include "build/build_config.h"
 #include "chrome/common/common_param_traits_macros.h"
 #include "chrome/common/importer/imported_bookmark_entry.h"
@@ -92,4 +93,15 @@ IPC_STRUCT_TRAITS_BEGIN(importer::ImporterIE7PasswordInfo)
   IPC_STRUCT_TRAITS_MEMBER(date_created)
 IPC_STRUCT_TRAITS_END()

+IPC_STRUCT_TRAITS_BEGIN(ImportedCookieEntry)
+  IPC_STRUCT_TRAITS_MEMBER(domain)
+  IPC_STRUCT_TRAITS_MEMBER(name)
+  IPC_STRUCT_TRAITS_MEMBER(value)
+  IPC_STRUCT_TRAITS_MEMBER(host)
+  IPC_STRUCT_TRAITS_MEMBER(path)
+  IPC_STRUCT_TRAITS_MEMBER(expiry_date)
+  IPC_STRUCT_TRAITS_MEMBER(secure)
+  IPC_STRUCT_TRAITS_MEMBER(httponly)
+IPC_STRUCT_TRAITS_END()
+
 #endif  // CHROME_COMMON_IMPORTER_PROFILE_IMPORT_PROCESS_PARAM_TRAITS_MACROS_H_
diff --git a/chrome/common/mac/app_mode_chrome_locator.mm b/chrome/common/mac/app_mode_chrome_locator.mm
index efd272e706ba56b748e4b76b96d76cbd03aa07ac..051851c40e6b721035c6b57ed5b359624d55e525 100644
--- a/chrome/common/mac/app_mode_chrome_locator.mm
+++ b/chrome/common/mac/app_mode_chrome_locator.mm
@@ -80,6 +80,7 @@ bool GetChromeBundleInfo(const base::FilePath& chrome_bundle,
   // on the data in their plist, so encode the framework names here.
   NSDictionary* framework_for_exe = @{
     @"Chromium": @"Chromium",
+    @"Brave": @"Brave",
     @"Google Chrome": @"Google Chrome",
     @"Google Chrome Canary": @"Google Chrome",
   };
diff --git a/chrome/renderer/BUILD.gn b/chrome/renderer/BUILD.gn
index 1dd59886504d335e5d26b8880b0adafc8bc5862b..f6f370066108ebef7cfddf2468ff6f753f240982 100644
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -363,6 +363,23 @@ static_library("renderer") {
       "resources/extensions/file_system_provider_custom_bindings.js",
     ]
   }
+
+  if (!muon_chromium_build) {
+    include_dirs = [
+      "//electron/chromium_src"
+    ]
+
+    sources -= [
+      "content_settings_observer.cc",
+      "content_settings_observer.h",
+    ]
+
+    if (enable_extensions) {
+      sources -= [
+        "extensions/chrome_extensions_dispatcher_delegate.cc",
+      ]
+    }
+  }
 }
 
 static_library("test_support") {
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
index 1b96488ad0536b9b1ac4f233a1846360a9d13027..c6618724485fc10a595dc551ed85085382f53278 100644
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -1361,19 +1361,19 @@ ChromeContentRendererClient::CreateBrowserPluginDelegate(
 #endif
 }

-void ChromeContentRendererClient::RecordRappor(const std::string& metric,
-                                               const std::string& sample) {
-  if (!rappor_recorder_)
-    RenderThread::Get()->GetRemoteInterfaces()->GetInterface(&rappor_recorder_);
-  rappor_recorder_->RecordRappor(metric, sample);
-}
-
-void ChromeContentRendererClient::RecordRapporURL(const std::string& metric,
-                                                  const GURL& url) {
-  if (!rappor_recorder_)
-    RenderThread::Get()->GetRemoteInterfaces()->GetInterface(&rappor_recorder_);
-  rappor_recorder_->RecordRapporURL(metric, url);
-}
+// void ChromeContentRendererClient::RecordRappor(const std::string& metric,
+//                                                const std::string& sample) {
+//   if (!rappor_recorder_)
+//     RenderThread::Get()->GetRemoteInterfaces()->GetInterface(&rappor_recorder_);
+//   rappor_recorder_->RecordRappor(metric, sample);
+// }
+
+// void ChromeContentRendererClient::RecordRapporURL(const std::string& metric,
+//                                                   const GURL& url) {
+//   if (!rappor_recorder_)
+//     RenderThread::Get()->GetRemoteInterfaces()->GetInterface(&rappor_recorder_);
+//   rappor_recorder_->RecordRapporURL(metric, url);
+// }

 void ChromeContentRendererClient::AddImageContextMenuProperties(
     const WebURLResponse& response,
diff --git a/chrome/renderer/chrome_content_renderer_client.h b/chrome/renderer/chrome_content_renderer_client.h
index 29a0b9b0e84718af0fdb6be4d7c18c4729fe5b68..1e350a6195819ca81a5e27a1d7df84e4aa8333db 100644
--- a/chrome/renderer/chrome_content_renderer_client.h
+++ b/chrome/renderer/chrome_content_renderer_client.h
@@ -169,9 +169,9 @@ class ChromeContentRendererClient : public content::ContentRendererClient {
       content::RenderFrame* render_frame,
       const std::string& mime_type,
       const GURL& original_url) override;
-  void RecordRappor(const std::string& metric,
-                    const std::string& sample) override;
-  void RecordRapporURL(const std::string& metric, const GURL& url) override;
+  // void RecordRappor(const std::string& metric,
+  //                   const std::string& sample) override;
+  // void RecordRapporURL(const std::string& metric, const GURL& url) override;
   void AddImageContextMenuProperties(
       const blink::WebURLResponse& response,
       std::map<std::string, std::string>* properties) override;
diff --git a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
index 12d432198186daf817c0b903af985b05ce17cda2..ddbfdb1765d6f8505c35a70b9465b99d8245a529 100644
--- a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
+++ b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
@@ -100,11 +100,11 @@ ChromeRendererPepperHostFactory::CreateResourceHost(
   // time of the corresponding instance's method calls.  Currently these
   // interfaces are available only for whitelisted apps which may not have
   // access to the other private interfaces.
-  switch (message.type()) {
-    case PpapiHostMsg_UMA_Create::ID: {
-      return base::MakeUnique<PepperUMAHost>(host_, instance, resource);
-    }
-  }
+  // switch (message.type()) {
+  //   case PpapiHostMsg_UMA_Create::ID: {
+  //     return base::MakeUnique<PepperUMAHost>(host_, instance, resource);
+  //   }
+  // }

   return nullptr;
 }
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index 22a865dc6a74b8ef33831c27a432ffba0cde142e..01eb004cb8c79b15e5b33bc6efa408f63383f15c 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -791,7 +791,7 @@ if (!is_android) {
       ]
     }

-    if (!use_aura || is_chromeos) {
+    if (toolkit_views && (!use_aura || is_chromeos)) {
       sources -= [ "//ui/views/corewm/desktop_capture_controller_unittest.cc" ]
     }
   }
diff --git a/chrome/utility/BUILD.gn b/chrome/utility/BUILD.gn
index 637a2336e396d92ef3dbe4a86421407e9a6f1a62..5bae64732f44f3e41a119239beea0f5516745a33 100644
--- a/chrome/utility/BUILD.gn
+++ b/chrome/utility/BUILD.gn
@@ -97,6 +97,7 @@ static_library("utility") {
       "//chrome/common/importer:interfaces",
       "//net:net_utility_services",
     ]
+    include_dirs = [ "//electron" ]
   }

   if (enable_extensions) {
diff --git a/chrome/utility/importer/external_process_importer_bridge.cc b/chrome/utility/importer/external_process_importer_bridge.cc
index 38a8e7a41bf771a59fdb3d227243b88c5b85b8d0..c3db151f0f5d2303a8f76ecf5b2ffb8f52bdc5d7 100644
--- a/chrome/utility/importer/external_process_importer_bridge.cc
+++ b/chrome/utility/importer/external_process_importer_bridge.cc
@@ -28,6 +28,7 @@ const int kNumBookmarksToSend = 100;
 const int kNumHistoryRowsToSend = 100;
 const int kNumFaviconsToSend = 100;
 const int kNumAutofillFormDataToSend = 100;
+const int kNumCookiesToSend = 100;

 } // namespace

@@ -160,6 +161,28 @@ void ExternalProcessImporterBridge::SetAutofillFormData(
   DCHECK_EQ(0, autofill_form_data_entries_left);
 }

+void ExternalProcessImporterBridge::SetCookies(
+    const std::vector<ImportedCookieEntry>& cookies) {
+  (*observer_)->OnCookiesImportStart(cookies.size());
+
+  // |cookies_left| is required for the checks below as Windows has a
+  // Debug bounds-check which prevents pushing an iterator beyond its end()
+  // (i.e., |it + 2 < s.end()| crashes in debug mode if |i + 1 == s.end()|).
+  int cookies_left = cookies.end() - cookies.begin();
+  for (std::vector<ImportedCookieEntry>::const_iterator it =
+           cookies.begin(); it < cookies.end();) {
+    std::vector<ImportedCookieEntry> cookies_group;
+    std::vector<ImportedCookieEntry>::const_iterator end_group =
+        it + std::min(cookies_left, kNumCookiesToSend);
+    cookies_group.assign(it, end_group);
+
+    (*observer_)->OnCookiesImportGroup(cookies_group);
+    cookies_left -= end_group - it;
+    it = end_group;
+  }
+  DCHECK_EQ(0, cookies_left);
+}
+
 void ExternalProcessImporterBridge::NotifyStarted() {
   (*observer_)->OnImportStart();
 }
diff --git a/chrome/utility/importer/external_process_importer_bridge.h b/chrome/utility/importer/external_process_importer_bridge.h
index 7e05c4e04f8e61b418d373a73bd8901347df4c76..1c080a558988cf0c76c051e186f78b7f80ac2352 100644
--- a/chrome/utility/importer/external_process_importer_bridge.h
+++ b/chrome/utility/importer/external_process_importer_bridge.h
@@ -76,6 +76,8 @@ class ExternalProcessImporterBridge : public ImporterBridge {
   void SetAutofillFormData(
       const std::vector<ImporterAutofillFormDataEntry>& entries) override;

+  void SetCookies(const std::vector<ImportedCookieEntry>& cookies) override;
+
   void NotifyStarted() override;
   void NotifyItemStarted(importer::ImportItem item) override;
   void NotifyItemEnded(importer::ImportItem item) override;
diff --git a/chrome/utility/importer/firefox_importer.cc b/chrome/utility/importer/firefox_importer.cc
index 7f8d598bca0243e62f11d5d2ce50d8c25ba88764..11064b77c8c69896c8137a096495813a8d0b6a6a 100644
--- a/chrome/utility/importer/firefox_importer.cc
+++ b/chrome/utility/importer/firefox_importer.cc
@@ -15,6 +15,7 @@
 #include "base/message_loop/message_loop.h"
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
+#include "brave/common/importer/imported_cookie_entry.h"
 #include "build/build_config.h"
 #include "chrome/common/importer/firefox_importer_utils.h"
 #include "chrome/common/importer/imported_bookmark_entry.h"
@@ -147,6 +148,12 @@ void FirefoxImporter::StartImport(const importer::SourceProfile& source_profile,
     ImportAutofillFormData();
     bridge_->NotifyItemEnded(importer::AUTOFILL_FORM_DATA);
   }
+  if ((items & importer::COOKIES) && !cancelled()) {
+    bridge_->NotifyItemStarted(importer::COOKIES);
+    ImportCookies();
+    bridge_->NotifyItemEnded(importer::COOKIES);
+  }
+  bridge_->NotifyEnded();
   bridge_->NotifyEnded();
 }

@@ -433,6 +440,50 @@ void FirefoxImporter::ImportAutofillFormData() {
     bridge_->SetAutofillFormData(form_entries);
 }

+void FirefoxImporter::ImportCookies() {
+  base::FilePath file = source_path_.AppendASCII("cookies.sqlite");
+  if (!base::PathExists(file))
+    return;
+
+  sql::Connection db;
+  if (!db.Open(file))
+    return;
+
+  const char query[] =
+      "SELECT baseDomain, name, value, host, path, expiry, isSecure, "
+      "isHttpOnly FROM moz_cookies";
+
+  sql::Statement s(db.GetUniqueStatement(query));
+
+  std::vector<ImportedCookieEntry> cookies;
+  while (s.Step() && !cancelled()) {
+    ImportedCookieEntry cookie;
+    base::string16 domain(base::UTF8ToUTF16("."));
+    domain.append(s.ColumnString16(0));
+    base::string16 host;
+    if (s.ColumnString16(3)[0] == '.') {
+      host.append(base::UTF8ToUTF16("*"));
+      host.append(s.ColumnString16(3));
+    } else {
+      host = s.ColumnString16(3);
+    }
+    cookie.domain = domain;
+    cookie.name = s.ColumnString16(1);
+    cookie.value = s.ColumnString16(2);
+    cookie.host = host;
+    cookie.path = s.ColumnString16(4);
+    cookie.expiry_date =
+      base::Time::FromDoubleT(s.ColumnInt64(5));
+    cookie.secure = s.ColumnBool(6);
+    cookie.httponly = s.ColumnBool(7);
+
+    cookies.push_back(cookie);
+  }
+
+  if (!cookies.empty() && !cancelled())
+    bridge_->SetCookies(cookies);
+}
+
 void FirefoxImporter::GetSearchEnginesXMLData(
     std::vector<std::string>* search_engine_data) {
   base::FilePath file = source_path_.AppendASCII("search.sqlite");
diff --git a/chrome/utility/importer/firefox_importer.h b/chrome/utility/importer/firefox_importer.h
index c3f648f165483a2d618438c1a4ef1b35ad6fb10c..192f603f8f18abf0ad25081d12e2f4d4372ccf79 100644
--- a/chrome/utility/importer/firefox_importer.h
+++ b/chrome/utility/importer/firefox_importer.h
@@ -54,6 +54,7 @@ class FirefoxImporter : public Importer {
   // defined in browserconfig.properties.
   void ImportHomepage();
   void ImportAutofillFormData();
+  void ImportCookies();
   void GetSearchEnginesXMLData(std::vector<std::string>* search_engine_data);
   void GetSearchEnginesXMLDataFromJSON(
       std::vector<std::string>* search_engine_data);
diff --git a/chrome/utility/importer/importer_creator.cc b/chrome/utility/importer/importer_creator.cc
index 2bef627aa890484a3fb75fa9bd04b2994f997305..6cdf479c733c3a546c8fc54bdb29d4bec031f2e1 100644
--- a/chrome/utility/importer/importer_creator.cc
+++ b/chrome/utility/importer/importer_creator.cc
@@ -6,6 +6,7 @@

 #include "base/logging.h"
 #include "build/build_config.h"
+#include "brave/utility/importer/chrome_importer.h"
 #include "chrome/utility/importer/bookmarks_file_importer.h"
 #include "chrome/utility/importer/firefox_importer.h"

@@ -43,6 +44,8 @@ scoped_refptr<Importer> CreateImporterByType(ImporterType type) {
     case TYPE_SAFARI:
       return new SafariImporter(base::mac::GetUserLibraryPath());
 #endif
+    case TYPE_CHROME:
+      return new ChromeImporter();
     default:
       NOTREACHED();
       return nullptr;
diff --git a/components/guest_view/browser/guest_view_base.cc b/components/guest_view/browser/guest_view_base.cc
index 606a47060b430eb6e808386349dd97f21c3fe211..c2405a843e7278b2ca2cd1600bae63d1efca3cfe 100644
--- a/components/guest_view/browser/guest_view_base.cc
+++ b/components/guest_view/browser/guest_view_base.cc
@@ -441,8 +441,12 @@ void GuestViewBase::DidDetach() {
   owner_web_contents()->Send(new GuestViewMsg_GuestDetached(
       element_instance_id_));
   element_instance_id_ = kInstanceIDNone;
-  if (!CanRunInDetachedState())
+  if (!CanRunInDetachedState()) {
     Destroy();
+  } else {
+    // Give the derived class an opportunity to perform some actions.
+    DidDetachFromEmbedder();
+  }
 }

 bool GuestViewBase::HandleFindForEmbedder(
diff --git a/components/guest_view/browser/guest_view_base.h b/components/guest_view/browser/guest_view_base.h
index 42e3734eff90e8765ae71ee02bf496da6cbeace3..49df85bdb329a0ddbdb4d223ee1fa824baee08b9 100644
--- a/components/guest_view/browser/guest_view_base.h
+++ b/components/guest_view/browser/guest_view_base.h
@@ -247,6 +247,9 @@ class GuestViewBase : public content::BrowserPluginGuestDelegate,
   // an opportunity to perform setup actions after attachment.
   virtual void DidAttachToEmbedder() {}

+  // This method is called after the guest has been detached from an embedder
+  virtual void DidDetachFromEmbedder() {}
+
   // This method is called after this GuestViewBase has been initiated.
   //
   // This gives the derived class an opportunity to perform additional
diff --git a/components/guest_view/browser/guest_view_manager.cc b/components/guest_view/browser/guest_view_manager.cc
index 315ea635bfd49e4d1ff029709ff9c39e657d48b8..bdda6074d0f76cfe0d9a8d11fe09ac255a4f9180 100644
--- a/components/guest_view/browser/guest_view_manager.cc
+++ b/components/guest_view/browser/guest_view_manager.cc
@@ -63,6 +63,7 @@ class GuestViewManager::EmbedderRenderProcessHostObserver

 // static
 GuestViewManagerFactory* GuestViewManager::factory_ = nullptr;
+GuestViewManager* manager_ = nullptr;

 GuestViewManager::GuestViewManager(
     content::BrowserContext* context,
@@ -87,7 +88,8 @@ GuestViewManager* GuestViewManager::CreateWithDelegate(
     } else {
       guest_manager = new GuestViewManager(context, std::move(delegate));
     }
-    context->SetUserData(kGuestViewManagerKeyName, guest_manager);
+    manager_ = guest_manager;
+    // context->SetUserData(kGuestViewManagerKeyName, guest_manager);
   }
   return guest_manager;
 }
@@ -95,8 +97,9 @@ GuestViewManager* GuestViewManager::CreateWithDelegate(
 // static
 GuestViewManager* GuestViewManager::FromBrowserContext(
     BrowserContext* context) {
-  return static_cast<GuestViewManager*>(context->GetUserData(
-      kGuestViewManagerKeyName));
+  // return static_cast<GuestViewManager*>(context->GetUserData(
+  //     kGuestViewManagerKeyName));
+  return manager_;
 }

 content::WebContents* GuestViewManager::GetGuestByInstanceIDSafely(
diff --git a/components/printing/common/print_messages.h b/components/printing/common/print_messages.h
index 9a90bc11073848958d9128c80dc76bedc54e796a..c52f0646edcad1a0876b0a5033f754a7faf508ed 100644
--- a/components/printing/common/print_messages.h
+++ b/components/printing/common/print_messages.h
@@ -228,7 +228,6 @@ IPC_STRUCT_TRAITS_BEGIN(PrintMsg_PrintPages_Params)
   IPC_STRUCT_TRAITS_MEMBER(pages)
 IPC_STRUCT_TRAITS_END()

-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Parameters to describe a rendered document.
 IPC_STRUCT_BEGIN(PrintHostMsg_DidPreviewDocument_Params)
   // A shared memory handle to metafile data.
@@ -250,6 +249,7 @@ IPC_STRUCT_BEGIN(PrintHostMsg_DidPreviewDocument_Params)
   IPC_STRUCT_MEMBER(int, preview_request_id)
 IPC_STRUCT_END()

+#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Parameters to describe a rendered preview page.
 IPC_STRUCT_BEGIN(PrintHostMsg_DidPreviewPage_Params)
   // A shared memory handle to metafile data for a draft document of the page.
@@ -361,13 +361,11 @@ IPC_MESSAGE_ROUTED1(PrintMsg_PrintingDone,
 // Tells the RenderFrame whether printing is enabled or not.
 IPC_MESSAGE_ROUTED1(PrintMsg_SetPrintingEnabled, bool /* enabled */)

-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Tells the RenderFrame to switch the CSS to print media type, renders every
 // requested pages for print preview using the given |settings|. This gets
 // called multiple times as the user updates settings.
 IPC_MESSAGE_ROUTED1(PrintMsg_PrintPreview,
                     base::DictionaryValue /* settings */)
-#endif

 // Messages sent from the renderer to the browser.

@@ -451,13 +449,13 @@ IPC_SYNC_MESSAGE_ROUTED2_1(PrintHostMsg_CheckForCancel,
                            int32_t /* PrintPreviewUI ID */,
                            int /* request id */,
                            bool /* print preview cancelled */)
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

 // Sends back to the browser the complete rendered document (non-draft mode,
 // used for printing) that was requested by a PrintMsg_PrintPreview message.
 // The memory handle in this message is already valid in the browser process.
 IPC_MESSAGE_ROUTED1(PrintHostMsg_MetafileReadyForPrinting,
                     PrintHostMsg_DidPreviewDocument_Params /* params */)
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

 // This is sent when there are invalid printer settings.
 IPC_MESSAGE_ROUTED0(PrintHostMsg_ShowInvalidPrinterSettingsError)
@@ -466,11 +464,11 @@ IPC_MESSAGE_ROUTED0(PrintHostMsg_ShowInvalidPrinterSettingsError)
 IPC_MESSAGE_ROUTED1(PrintHostMsg_PrintingFailed,
                     int /* document cookie */)

-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Tell the browser print preview failed.
 IPC_MESSAGE_ROUTED1(PrintHostMsg_PrintPreviewFailed,
                     int /* document cookie */)

+#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Tell the browser print preview was cancelled.
 IPC_MESSAGE_ROUTED1(PrintHostMsg_PrintPreviewCancelled,
                     int /* document cookie */)
diff --git a/components/printing/renderer/print_web_view_helper.cc b/components/printing/renderer/print_web_view_helper.cc
index eaa294d97cf0375669c12b0e08526f95280fc0a2..3f55c49e18f9324eb71fb02ff9dc5a3623b5876b 100644
--- a/components/printing/renderer/print_web_view_helper.cc
+++ b/components/printing/renderer/print_web_view_helper.cc
@@ -323,7 +323,7 @@ bool PrintingNodeOrPdfFrame(const blink::WebLocalFrame* frame,
   return plugin && plugin->supportsPaginatedPrint();
 }

-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#if 0
 // Returns true if the current destination printer is PRINT_TO_PDF.
 bool IsPrintToPdfRequested(const base::DictionaryValue& job_settings) {
   bool print_to_pdf = false;
@@ -345,7 +345,7 @@ bool PrintingFrameHasPageSizeStyle(blink::WebLocalFrame* frame,
   }
   return frame_has_custom_page_size_style;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#endif  // 0

 #if BUILDFLAG(ENABLE_PRINTING)
 // Disable scaling when either:
@@ -401,7 +401,7 @@ MarginType GetMarginsForPdf(blink::WebLocalFrame* frame,
 }
 #endif

-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#if 0
 bool FitToPageEnabled(const base::DictionaryValue& job_settings) {
   bool fit_to_paper_size = false;
   if (!job_settings.GetBoolean(kSettingFitToPageEnabled, &fit_to_paper_size)) {
@@ -444,7 +444,7 @@ blink::WebPrintScalingOption GetPrintScalingOption(
   }
   return blink::WebPrintScalingOptionFitToPrintableArea;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#endif  // 0

 // Helper function to scale and round an integer value with a double valued
 // scaling.
@@ -1004,9 +1004,9 @@ bool PrintWebViewHelper::OnMessageReceived(const IPC::Message& message) {
 #endif
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
     IPC_MESSAGE_HANDLER(PrintMsg_InitiatePrintPreview, OnInitiatePrintPreview)
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
     IPC_MESSAGE_HANDLER(PrintMsg_PrintPreview, OnPrintPreview)
     IPC_MESSAGE_HANDLER(PrintMsg_PrintingDone, OnPrintingDone)
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
     IPC_MESSAGE_HANDLER(PrintMsg_SetPrintingEnabled, OnSetPrintingEnabled)
     IPC_MESSAGE_UNHANDLED(handled = false)
   IPC_END_MESSAGE_MAP()
@@ -1023,8 +1023,8 @@ void PrintWebViewHelper::OnDestruct() {

 #if BUILDFLAG(ENABLE_BASIC_PRINTING)
 void PrintWebViewHelper::OnPrintPages() {
-  if (ipc_nesting_level_> 1)
-    return;
+  // if (ipc_nesting_level_> 1)
+  //   return;

   blink::WebLocalFrame* frame = render_frame()->GetWebFrame();

@@ -1135,8 +1135,8 @@ void PrintWebViewHelper::UpdateFrameMarginsCssInfo(
   ignore_css_margins_ = (margins_type != DEFAULT_MARGINS);
 }

-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
+#if 0
   if (ipc_nesting_level_ > 1)
     return;

@@ -1144,6 +1144,10 @@ void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {

   UMA_HISTOGRAM_ENUMERATION("PrintPreview.PreviewEvent",
                             PREVIEW_EVENT_REQUESTED, PREVIEW_EVENT_MAX);
+#endif  // 0
+
+  blink::WebLocalFrame* frame = render_frame()->GetWebFrame();
+  print_preview_context_.InitWithFrame(frame);

   if (!print_preview_context_.source_frame()) {
     DidFinishPrinting(FAIL_PREVIEW);
@@ -1152,6 +1156,7 @@ void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {

   if (!UpdatePrintSettings(print_preview_context_.source_frame(),
                            print_preview_context_.source_node(), settings)) {
+#if 0
     if (print_preview_context_.last_error() != PREVIEW_ERROR_BAD_SETTING) {
       Send(new PrintHostMsg_PrintPreviewInvalidPrinterSettings(
           routing_id(), print_pages_params_
@@ -1159,21 +1164,25 @@ void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
                             : 0));
       notify_browser_of_print_failure_ = false;  // Already sent.
     }
+#endif  // 0
     DidFinishPrinting(FAIL_PREVIEW);
     return;
   }

   // Set the options from document if we are previewing a pdf and send a
   // message to browser.
+#if 0
   if (print_pages_params_->params.is_first_request &&
       !print_preview_context_.IsModifiable()) {
     PrintHostMsg_SetOptionsFromDocument_Params options;
     if (SetOptionsFromPdfDocument(&options))
       Send(new PrintHostMsg_SetOptionsFromDocument(routing_id(), options));
   }
+#endif  // 0

   is_print_ready_metafile_sent_ = false;

+#if 0
   // PDF printer device supports alpha blending.
   print_pages_params_->params.supports_alpha_blend = true;

@@ -1182,6 +1191,7 @@ void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
     NOTREACHED();
   }
   print_preview_context_.set_generate_draft_pages(generate_draft_pages);
+#endif  // 0

   PrepareFrameForPreviewDocument();
 }
@@ -1189,7 +1199,7 @@ void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
 void PrintWebViewHelper::PrepareFrameForPreviewDocument() {
   reset_prep_frame_view_ = false;

-  if (!print_pages_params_ || CheckForCancel()) {
+  if (!print_pages_params_) {
     DidFinishPrinting(FAIL_PREVIEW);
     return;
   }
@@ -1220,11 +1230,11 @@ void PrintWebViewHelper::OnFramePreparedForPreviewDocument() {
 }

 bool PrintWebViewHelper::CreatePreviewDocument() {
-  if (!print_pages_params_ || CheckForCancel())
+  if (!print_pages_params_)
     return false;

-  UMA_HISTOGRAM_ENUMERATION("PrintPreview.PreviewEvent",
-                            PREVIEW_EVENT_CREATE_DOCUMENT, PREVIEW_EVENT_MAX);
+  // UMA_HISTOGRAM_ENUMERATION("PrintPreview.PreviewEvent",
+  //                           PREVIEW_EVENT_CREATE_DOCUMENT, PREVIEW_EVENT_MAX);

   const PrintMsg_Print_Params& print_params = print_pages_params_->params;
   const std::vector<int>& pages = print_pages_params_->pages;
@@ -1234,6 +1244,7 @@ bool PrintWebViewHelper::CreatePreviewDocument() {
     return false;
   }

+#if 0
   PageSizeMargins default_page_layout;
   double scale_factor =
       print_params.scale_factor >= kEpsilon ? print_params.scale_factor : 1.0f;
@@ -1300,6 +1311,7 @@ bool PrintWebViewHelper::CreatePreviewDocument() {
   Send(new PrintHostMsg_DidGetPreviewPageCount(routing_id(), params));
   if (CheckForCancel())
     return false;
+#endif  // 0

   while (!print_preview_context_.IsFinalPageRendered()) {
     int page_number = print_preview_context_.GetNextPageNumber();
@@ -1307,8 +1319,8 @@ bool PrintWebViewHelper::CreatePreviewDocument() {
     if (!RenderPreviewPage(page_number, print_params))
       return false;

-    if (CheckForCancel())
-      return false;
+    // if (CheckForCancel())
+    //   return false;

     // We must call PrepareFrameAndViewForPrint::FinishPrinting() (by way of
     // print_preview_context_.AllPagesRendered()) before calling
@@ -1331,7 +1343,7 @@ bool PrintWebViewHelper::CreatePreviewDocument() {
   return true;
 }

-#if !defined(OS_MACOSX) && BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#if !defined(OS_MACOSX)
 bool PrintWebViewHelper::RenderPreviewPage(
     int page_number,
     const PrintMsg_Print_Params& print_params) {
@@ -1361,7 +1373,7 @@ bool PrintWebViewHelper::RenderPreviewPage(
   }
   return PreviewPageRendered(page_number, draft_metafile.get());
 }
-#endif  // !defined(OS_MACOSX) && BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#endif  // !defined(OS_MACOSX)

 bool PrintWebViewHelper::FinalizePrintReadyDocument() {
   DCHECK(!is_print_ready_metafile_sent_);
@@ -1391,11 +1403,10 @@ bool PrintWebViewHelper::FinalizePrintReadyDocument() {
   Send(new PrintHostMsg_MetafileReadyForPrinting(routing_id(), preview_params));
   return true;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

 void PrintWebViewHelper::OnPrintingDone(bool success) {
-  if (ipc_nesting_level_ > 1)
-    return;
+  // if (ipc_nesting_level_ > 1)
+  //   return;
   notify_browser_of_print_failure_ = false;
   if (!success)
     LOG(ERROR) << "Failure in OnPrintingDone";
@@ -1540,8 +1551,8 @@ void PrintWebViewHelper::DidFinishPrinting(PrintingResult result) {
       }
       break;

-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
     case FAIL_PREVIEW:
+#if 0
       int cookie =
           print_pages_params_ ? print_pages_params_->params.document_cookie : 0;
       if (notify_browser_of_print_failure_) {
@@ -1550,9 +1561,13 @@ void PrintWebViewHelper::DidFinishPrinting(PrintingResult result) {
       } else {
         Send(new PrintHostMsg_PrintPreviewCancelled(routing_id(), cookie));
       }
-      print_preview_context_.Failed(notify_browser_of_print_failure_);
+#endif  // 0
+      LOG(ERROR) << "PREVIEW FAILED.";
+      if (print_pages_params_) {
+        Send(new PrintHostMsg_PrintPreviewFailed(routing_id(),
+                 print_pages_params_->params.document_cookie));
+      }
       break;
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
   }
   prep_frame_view_.reset();
   print_pages_params_.reset();
@@ -1715,6 +1730,7 @@ bool PrintWebViewHelper::SetOptionsFromPdfDocument(
   }
   return true;
 }
+#endif  // defined(ENABLE_PRINT_PREVIEW)

 bool PrintWebViewHelper::UpdatePrintSettings(
     blink::WebLocalFrame* frame,
@@ -1757,13 +1773,16 @@ bool PrintWebViewHelper::UpdatePrintSettings(
     return false;
   }

+#if 0
   if (!job_settings->GetInteger(kPreviewUIID, &settings.params.preview_ui_id)) {
     NOTREACHED();
     print_preview_context_.set_error(PREVIEW_ERROR_BAD_SETTING);
     return false;
   }
+#endif

   if (!print_for_preview_) {
+#if 0
     // Validate expected print preview settings.
     if (!job_settings->GetInteger(kPreviewRequestID,
                                   &settings.params.preview_request_id) ||
@@ -1778,6 +1797,13 @@ bool PrintWebViewHelper::UpdatePrintSettings(
     UpdateFrameMarginsCssInfo(*job_settings);
     settings.params.print_scaling_option = GetPrintScalingOption(
         frame, node, source_is_html, *job_settings, settings.params);
+#endif  // 0
+    job_settings->GetInteger(kPreviewRequestID,
+        &settings.params.preview_request_id);
+    settings.params.print_to_pdf = true;
+    UpdateFrameMarginsCssInfo(*job_settings);
+    settings.params.print_scaling_option =
+       blink::WebPrintScalingOptionSourceSize;
   }

   SetPrintPagesParams(settings);
@@ -1786,12 +1812,9 @@ bool PrintWebViewHelper::UpdatePrintSettings(
     return true;

   if (print_for_preview_)
-    Send(new PrintHostMsg_ShowInvalidPrinterSettingsError(routing_id()));
-  else
     print_preview_context_.set_error(PREVIEW_ERROR_INVALID_PRINTER_SETTINGS);
   return false;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

 #if BUILDFLAG(ENABLE_BASIC_PRINTING)
 void PrintWebViewHelper::GetPrintSettingsFromUser(
@@ -2049,6 +2072,7 @@ bool PrintWebViewHelper::CheckForCancel() {
     notify_browser_of_print_failure_ = false;
   return cancel;
 }
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

 bool PrintWebViewHelper::PreviewPageRendered(int page_number,
                                              PdfMetafileSkia* metafile) {
@@ -2070,6 +2094,7 @@ bool PrintWebViewHelper::PreviewPageRendered(int page_number,
     return false;
   }

+#if 0
   PrintHostMsg_DidPreviewPage_Params preview_page_params;
   // Get the size of the resulting metafile.
   if (!CopyMetafileDataToSharedMem(
@@ -2084,9 +2109,9 @@ bool PrintWebViewHelper::PreviewPageRendered(int page_number,
       print_pages_params_->params.preview_request_id;

   Send(new PrintHostMsg_DidPreviewPage(routing_id(), preview_page_params));
+#endif  // 0
   return true;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

 PrintWebViewHelper::PrintPreviewContext::PrintPreviewContext()
     : total_page_count_(0),
diff --git a/components/printing/renderer/print_web_view_helper.h b/components/printing/renderer/print_web_view_helper.h
index d979333feb1fd72972fe4109e1afc061f49af2d1..304b7404092138dfcb1642a9f041a47bc216e435 100644
--- a/components/printing/renderer/print_web_view_helper.h
+++ b/components/printing/renderer/print_web_view_helper.h
@@ -145,9 +145,7 @@ class PrintWebViewHelper
     OK,
     FAIL_PRINT_INIT,
     FAIL_PRINT,
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
     FAIL_PREVIEW,
-#endif
   };

   enum PrintPreviewErrorBuckets {
@@ -185,8 +183,8 @@ class PrintWebViewHelper
 #endif  // BUILDFLAG(ENABLE_BASIC_PRINTING)
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
   void OnInitiatePrintPreview(bool has_selection);
-  void OnPrintPreview(const base::DictionaryValue& settings);
 #endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
+  void OnPrintPreview(const base::DictionaryValue& settings);
   void OnPrintingDone(bool success);

   // Get |page_size| and |content_area| information from
@@ -199,7 +197,6 @@ class PrintWebViewHelper
   // Update |ignore_css_margins_| based on settings.
   void UpdateFrameMarginsCssInfo(const base::DictionaryValue& settings);

-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
   // Prepare frame for creating preview document.
   void PrepareFrameForPreviewDocument();

@@ -216,7 +213,6 @@ class PrintWebViewHelper

   // Finalize the print ready preview document.
   bool FinalizePrintReadyDocument();
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

   // Enable/Disable printing.
   void OnSetPrintingEnabled(bool enabled);
@@ -250,6 +246,7 @@ class PrintWebViewHelper
   // Set options for print preset from source PDF document.
   bool SetOptionsFromPdfDocument(
       PrintHostMsg_SetOptionsFromDocument_Params* options);
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

   // Update the current print settings with new |passed_job_settings|.
   // |passed_job_settings| dictionary contains print job details such as printer
@@ -257,7 +254,6 @@ class PrintWebViewHelper
   bool UpdatePrintSettings(blink::WebLocalFrame* frame,
                            const blink::WebNode& node,
                            const base::DictionaryValue& passed_job_settings);
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

 #if BUILDFLAG(ENABLE_BASIC_PRINTING)
   // Get final print settings from the user.
@@ -363,6 +359,7 @@ class PrintWebViewHelper
   // WARNING: |this| may be gone after this method returns when |type| is
   // PRINT_PREVIEW_SCRIPTED.
   void RequestPrintPreview(PrintPreviewRequestType type);
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

   // Checks whether print preview should continue or not.
   // Returns true if canceling, false if continuing.
@@ -374,7 +371,6 @@ class PrintWebViewHelper
   // |metafile| is the rendered page. Otherwise |metafile| is NULL.
   // Returns true if print preview should continue, false on failure.
   bool PreviewPageRendered(int page_number, PdfMetafileSkia* metafile);
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

   void SetPrintPagesParams(const PrintMsg_PrintPages_Params& settings);

diff --git a/components/printing/renderer/print_web_view_helper_mac.mm b/components/printing/renderer/print_web_view_helper_mac.mm
index 6de15ad3c7a8f111a839fde82925a3f96b82bd22..8c6e8ce6a7c2c61d8945e7666e0d9bc285291a2d 100644
--- a/components/printing/renderer/print_web_view_helper_mac.mm
+++ b/components/printing/renderer/print_web_view_helper_mac.mm
@@ -68,7 +68,6 @@ void PrintWebViewHelper::PrintPageInternal(
   Send(new PrintHostMsg_DidPrintPage(routing_id(), page_params));
 }

-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 bool PrintWebViewHelper::RenderPreviewPage(
     int page_number,
     const PrintMsg_Print_Params& print_params) {
@@ -105,7 +104,6 @@ bool PrintWebViewHelper::RenderPreviewPage(
   }
   return PreviewPageRendered(page_number, draft_metafile.get());
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)

 void PrintWebViewHelper::RenderPage(const PrintMsg_Print_Params& params,
                                     int page_number,
diff --git a/content/app/content_main_runner.cc b/content/app/content_main_runner.cc
index c2839221ad4b22eb5b8c17b51671328918570687..e48afee2fa8ac11147caea02d1ed6e60210c6da0 100644
--- a/content/app/content_main_runner.cc
+++ b/content/app/content_main_runner.cc
@@ -763,7 +763,7 @@ class ContentMainRunnerImpl : public ContentMainRunner {

     InitializeV8IfNeeded(command_line, process_type);

-#if !defined(OFFICIAL_BUILD)
+#if 0
 #if defined(OS_WIN)
     bool should_enable_stack_dump = !process_type.empty();
 #else
@@ -778,7 +778,7 @@ class ContentMainRunnerImpl : public ContentMainRunner {
             switches::kDisableInProcessStackTraces)) {
       base::debug::EnableInProcessStackDumping();
     }
-#endif  // !defined(OFFICIAL_BUILD)
+#endif  // 0

     if (delegate_)
       delegate_->PreSandboxStartup();
diff --git a/content/browser/frame_host/render_frame_message_filter.cc b/content/browser/frame_host/render_frame_message_filter.cc
index 5b8f571ae0ddb1778e3b4fc9e1401d72d1441cd5..10222136f876a6feaac7713b7a9256afc0b576e0 100644
--- a/content/browser/frame_host/render_frame_message_filter.cc
+++ b/content/browser/frame_host/render_frame_message_filter.cc
@@ -478,7 +478,7 @@ void RenderFrameMessageFilter::GetPluginsCallback(
   PluginServiceFilter* filter = PluginServiceImpl::GetInstance()->GetFilter();
   std::vector<WebPluginInfo> plugins;

-  int child_process_id = -1;
+  int child_process_id = render_process_id_;
   int routing_id = MSG_ROUTING_NONE;
   // In this loop, copy the WebPluginInfo (and do not use a reference) because
   // the filter might mutate it.
diff --git a/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm b/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
index d10bcb69154d389318b6f67ba231dba728f5f1cd..fffbf371e38da48dcb7037bcb9da5505e303bc32 100644
--- a/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
+++ b/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
@@ -21,7 +21,7 @@
 // Filled with default values.
 @property(readonly) CGFloat deltaX;
 @property(readonly) CGFloat deltaY;
-@property(readonly) NSEventModifierFlags modifierFlags;
+@property(readonly) NSUInteger modifierFlags;
 @property(readonly) NSTimeInterval timestamp;

 @end
diff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm
index b7f8bad5ef1a10c5d2e9ac4d83f87e069dbd179a..615023a1338aa05cc2ba2a60ae5fe218d7c13180 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -139,6 +139,12 @@ RenderWidgetHostView* GetRenderWidgetHostViewToUse(

 }  // namespace

+#ifndef MUON_CHROMIUM_BUILD
+@interface NSWindow (AtomCustomMethods)
+- (BOOL)acceptsFirstMouse;
+- (BOOL)disableAutoHideCursor;
+@end
+#endif
 // These are not documented, so use only after checking -respondsToSelector:.
 @interface NSApplication (UndocumentedSpeechMethods)
 - (void)speakString:(NSString*)string;
@@ -465,7 +471,9 @@ RenderWidgetHostViewMac::RenderWidgetHostViewMac(RenderWidgetHost* widget,
   background_layer_.reset([[CALayer alloc] init]);
   // Set the default color to be white. This is the wrong thing to do, but many
   // UI components expect this view to be opaque.
+#ifdef MUON_CHROMIUM_BUILD
   [background_layer_ setBackgroundColor:CGColorGetConstantColor(kCGColorWhite)];
+#endif
   [cocoa_view_ setLayer:background_layer_];
   [cocoa_view_ setWantsLayer:YES];

@@ -1846,7 +1854,14 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 }

 - (BOOL)acceptsFirstMouse:(NSEvent*)theEvent {
+#ifdef MUON_CHROMIUM_BUILD
   return [self acceptsMouseEventsWhenInactive];
+#else
+  if ([self.window respondsToSelector:@selector(acceptsFirstMouse)] &&
+      [self.window acceptsFirstMouse])
+    return YES;
+  return NO;
+#endif  // MUON_CHROMIUM_BUILD
 }

 - (void)setCloseOnDeactivate:(BOOL)b {
@@ -2002,6 +2017,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   if (EventIsReservedBySystem(theEvent))
     return NO;

+#ifdef MUON_CHROMIUM_BUILD
   // If we return |NO| from this function, cocoa will send the key event to
   // the menu and only if the menu does not process the event to |keyDown:|. We
   // want to send the event to a renderer _before_ sending it to the menu, so
@@ -2015,6 +2031,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
     DCHECK(![[NSApp mainMenu] performKeyEquivalent:theEvent]);
     return NO;
   }
+#endif  // MUON_CHROMIUM_BUILD

   // Command key combinations are sent via performKeyEquivalent rather than
   // keyDown:. We just forward this on and if WebCore doesn't want to handle
@@ -2062,8 +2079,10 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   if (EventIsReservedBySystem(theEvent))
     return;

+#ifdef MUON_CHROMIUM_BUILD
   DCHECK([theEvent type] != NSKeyDown ||
          !equiv == !([theEvent modifierFlags] & NSCommandKeyMask));
+#endif  // MUON_CHROMIUM_BUILD

   if ([theEvent type] == NSFlagsChanged) {
     // Ignore NSFlagsChanged events from the NumLock and Fn keys as
@@ -2423,14 +2442,18 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   // do so. For this reason, for now, we accept this non-ideal way of fixing the
   // point offset manually from the view bounds. This should be revisited when
   // fixing issues in TextInputClientMac (https://crbug.com/643233).
+#ifdef MUON_CHROMIUM_BUILD
   gfx::Rect root_box = renderWidgetHostView_->GetViewBounds();
   gfx::Rect view_box = widgetHost->GetView()->GetViewBounds();
+#endif  // MUON_CHROMIUM_BUILD

   TextInputClientMac::GetInstance()->GetStringFromRange(
       widgetHost, range, ^(NSAttributedString* string, NSPoint baselinePoint) {
+#ifdef MUON_CHROMIUM_BUILD
         baselinePoint.x += view_box.origin().x() - root_box.origin().x();
         baselinePoint.y +=
             root_box.bottom_left().y() - view_box.bottom_left().y();
+#endif  // MUON_CHROMIUM_BUILD
         [self showLookUpDictionaryOverlayInternal:string
                                     baselinePoint:baselinePoint
                                        targetView:targetView];
@@ -2809,6 +2832,11 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 // move) for the given event. Customize here to be more selective about which
 // key presses to autohide on.
 + (BOOL)shouldAutohideCursorForEvent:(NSEvent*)event {
+#ifndef MUON_CHROMIUM_BUILD
+  if ([event.window respondsToSelector:@selector(disableAutoHideCursor)] &&
+      [event.window disableAutoHideCursor])
+    return NO;
+#endif  // MUON_CHROMIUM_BUILD
   return ([event type] == NSKeyDown &&
              !([event modifierFlags] & NSCommandKeyMask)) ? YES : NO;
 }
diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index e3076d2727e3fccce10079773e43b606a916f869..5e05f68a506fbc109a61a8c036bcf42f2152f6cb 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -1540,7 +1540,8 @@ void WebContentsImpl::Init(const WebContents::CreateParams& params) {
   // This is set before initializing the render manager since
   // RenderFrameHostManager::Init calls back into us via its delegate to ask if
   // it should be hidden.
-  should_normally_be_visible_ = !params.initially_hidden;
+  // should_normally_be_visible_ = !params.initially_hidden;
+  should_normally_be_visible_ = true;

   // The routing ids must either all be set or all be unset.
   DCHECK((params.routing_id == MSG_ROUTING_NONE &&
@@ -2046,7 +2047,8 @@ void WebContentsImpl::CreateNewWindow(
   DCHECK(!params.opener_suppressed || render_view_route_id == MSG_ROUTING_NONE);

   scoped_refptr<SiteInstance> site_instance =
-      params.opener_suppressed && !is_guest
+      // params.opener_suppressed && !is_guest
+      params.opener_suppressed
           ? SiteInstance::CreateForURL(GetBrowserContext(), params.target_url)
           : source_site_instance;

diff --git a/content/browser/web_contents/web_contents_view_mac.mm b/content/browser/web_contents/web_contents_view_mac.mm
index b2366393bad700944ddbf977d318b1b59455f8e7..520eefb5631eb61f7bad73f9d35f35680e0d697e 100644
--- a/content/browser/web_contents/web_contents_view_mac.mm
+++ b/content/browser/web_contents/web_contents_view_mac.mm
@@ -589,6 +589,7 @@ void WebContentsViewMac::CloseTab() {
              endedAt:(NSPoint)screenPoint
            operation:(NSDragOperation)operation {
   [dragSource_ endDragAt:screenPoint operation:operation];
+  [dragDest_ endDrag];

   // Might as well throw out this object now.
   dragSource_.reset();
diff --git a/content/browser/web_contents/web_drag_dest_mac.h b/content/browser/web_contents/web_drag_dest_mac.h
index da4427bca57814b671c22a900781a77116adc526..56462350c4c9f6590097728a531ec18b36e79ee6 100644
--- a/content/browser/web_contents/web_drag_dest_mac.h
+++ b/content/browser/web_contents/web_drag_dest_mac.h
@@ -92,6 +92,9 @@ GetRenderWidgetHostAtPoint:(const NSPoint&)viewPoint
 // Sets |dragStartProcessID_| and |dragStartViewID_|.
 - (void)setDragStartTrackersForProcess:(int)processID;

+// Ends a drag operation
+- (void)endDrag;
+
 // Returns whether |targetRWH| is a valid RenderWidgetHost to be dragging
 // over. This enforces that same-page, cross-site drags are not allowed. See
 // crbug.com/666858.
diff --git a/content/browser/web_contents/web_drag_dest_mac.mm b/content/browser/web_contents/web_drag_dest_mac.mm
index 37ed2657ac19f8a1dbbdc54b9cff3dae5a578e6a..edc3a5f56f51a500fa5b09603ae49fc3914536d3 100644
--- a/content/browser/web_contents/web_drag_dest_mac.mm
+++ b/content/browser/web_contents/web_drag_dest_mac.mm
@@ -347,6 +347,12 @@ GetRenderWidgetHostAtPoint:(const NSPoint&)viewPoint
   dragStartViewID_ = GetRenderViewHostID(webContents_->GetRenderViewHost());
 }

+- (void)endDrag {
+  dragStartProcessID_ = content::ChildProcessHost::kInvalidUniqueID;
+  dragStartViewID_ = content::GlobalRoutingID(
+    content::ChildProcessHost::kInvalidUniqueID, MSG_ROUTING_NONE);
+}
+
 - (bool)isValidDragTarget:(content::RenderWidgetHostImpl*)targetRWH {
   return targetRWH->GetProcess()->GetID() == dragStartProcessID_ ||
          GetRenderViewHostID(webContents_->GetRenderViewHost()) !=
diff --git a/content/child/child_process.cc b/content/child/child_process.cc
index 49aa72c3779fbe3c17e2c84eb41b8c9502936ad4..4cdf4255fc786c27c458939fbbff793cfec6df6c 100644
--- a/content/child/child_process.cc
+++ b/content/child/child_process.cc
@@ -153,7 +153,7 @@ void ChildProcess::WaitForDebugger(const std::string& label) {
 #if defined(GOOGLE_CHROME_BUILD)
   std::string title = "Google Chrome";
 #else  // CHROMIUM_BUILD
-  std::string title = "Chromium";
+  std::string title = "Brave";
 #endif  // CHROMIUM_BUILD
   title += " ";
   title += label;  // makes attaching to process easier
diff --git a/content/common/dom_storage/dom_storage_map.cc b/content/common/dom_storage/dom_storage_map.cc
index 71368bdd55039ddc76278e7b5706e30517ab8aae..526ce5d8a08002af28762ae54a9280ce3f9d96d7 100644
--- a/content/common/dom_storage/dom_storage_map.cc
+++ b/content/common/dom_storage/dom_storage_map.cc
@@ -66,8 +66,8 @@ bool DOMStorageMap::SetItem(

   // Only check quota if the size is increasing, this allows
   // shrinking changes to pre-existing files that are over budget.
-  if (new_item_size > old_item_size && new_bytes_used > quota_)
-    return false;
+  // if (new_item_size > old_item_size && new_bytes_used > quota_)
+  //   return false;

   values_[key] = base::NullableString16(value, false);
   ResetKeyIterator();
diff --git a/content/public/app/mojo/content_renderer_manifest.json b/content/public/app/mojo/content_renderer_manifest.json
index 8894861c7876531fe72a4969a60d241e9512f7f4..1b064146742061cf67347e129955c3652a86c1d5 100644
--- a/content/public/app/mojo/content_renderer_manifest.json
+++ b/content/public/app/mojo/content_renderer_manifest.json
@@ -32,6 +32,7 @@
     "navigation:frame": {
       "provides": {
         "browser": [
+          "autofill::mojom::AutofillAgent",
           "blink::mojom::AppBannerController",
           "blink::mojom::EngagementClient",
           "blink::mojom::InstallationService",
diff --git a/content/public/browser/resource_request_details.cc b/content/public/browser/resource_request_details.cc
index 0e790b688417f077815ab588406bd67738cdb4a3..0b5140a416ff1017c96c44ff223ea61871d7b4b9 100644
--- a/content/public/browser/resource_request_details.cc
+++ b/content/public/browser/resource_request_details.cc
@@ -22,6 +22,10 @@ ResourceRequestDetails::ResourceRequestDetails(const net::URLRequest* request,
       has_certificate(has_certificate),
       ssl_cert_status(request->ssl_info().cert_status),
       socket_address(request->GetSocketAddress()) {
+  if (request->response_info().headers.get())
+    headers = new net::HttpResponseHeaders(
+        request->response_info().headers->raw_headers());
+
   const ResourceRequestInfo* info = ResourceRequestInfo::ForRequest(request);
   resource_type = info->GetResourceType();
   http_response_code =
diff --git a/content/public/browser/resource_request_details.h b/content/public/browser/resource_request_details.h
index e54e2c0fcc8eac6fe637025c3c71f3d6834a4892..d817176d073d8a96fa76b944f6fb198d425b2490 100644
--- a/content/public/browser/resource_request_details.h
+++ b/content/public/browser/resource_request_details.h
@@ -10,6 +10,7 @@
 #include "content/public/common/resource_type.h"
 #include "net/base/host_port_pair.h"
 #include "net/cert/cert_status_flags.h"
+#include "net/http/http_response_headers.h"
 #include "net/url_request/url_request_status.h"
 #include "url/gurl.h"

@@ -41,6 +42,7 @@ struct ResourceRequestDetails {
   // HTTP response code. See HttpResponseHeaders::response_code().
   // -1 if there are no response headers yet.
   int http_response_code;
+  scoped_refptr<net::HttpResponseHeaders> headers;
 };

 // Details about a redirection of a resource request.
diff --git a/content/renderer/browser_plugin/browser_plugin.cc b/content/renderer/browser_plugin/browser_plugin.cc
index d7ebcfdb8eb930de3146c64d69307f4f48aad6bd..de8772061040c596494f53106d56772b48ba6647 100644
--- a/content/renderer/browser_plugin/browser_plugin.cc
+++ b/content/renderer/browser_plugin/browser_plugin.cc
@@ -460,8 +460,8 @@ blink::WebInputEventResult BrowserPlugin::handleInputEvent(

   if (blink::WebInputEvent::isGestureEventType(event.type())) {
     auto gesture_event = static_cast<const blink::WebGestureEvent&>(event);
-    DCHECK(blink::WebInputEvent::GestureTapDown == event.type() ||
-           gesture_event.resendingPluginId == browser_plugin_instance_id_);
+    // DCHECK(blink::WebInputEvent::GestureTapDown == event.type() ||
+    //        gesture_event.resendingPluginId == browser_plugin_instance_id_);

     // We shouldn't be forwarding GestureEvents to the Guest anymore. Indicate
     // we handled this only if it's a non-resent event.
diff --git a/content/renderer/render_thread_impl.cc b/content/renderer/render_thread_impl.cc
index 02a6627cb64b382382cca61bbdb793cec28ec5c2..db02c33bfe5bb0c2d869c49d8be154614cb0b95b 100644
--- a/content/renderer/render_thread_impl.cc
+++ b/content/renderer/render_thread_impl.cc
@@ -747,12 +747,12 @@ void RenderThreadImpl::Init(
       switches::kEnableGpuMemoryBufferCompositorResources);

 #if defined(OS_MACOSX)
-  base::ScopedCFTypeRef<CFStringRef> key(
-      base::SysUTF8ToCFStringRef("NSScrollViewRubberbanding"));
-  Boolean key_exists = false;
-  Boolean value = CFPreferencesGetAppBooleanValue(
-      key, kCFPreferencesCurrentApplication, &key_exists);
-  is_elastic_overscroll_enabled_ = !key_exists || value;
+  // base::ScopedCFTypeRef<CFStringRef> key(
+  //     base::SysUTF8ToCFStringRef("NSScrollViewRubberbanding"));
+  // Boolean key_exists = false;
+  // Boolean value = CFPreferencesGetAppBooleanValue(
+  //     key, kCFPreferencesCurrentApplication, &key_exists);
+  // is_elastic_overscroll_enabled_ = !key_exists || value;
 #else
   is_elastic_overscroll_enabled_ = false;
 #endif
diff --git a/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc b/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
index 061480b5acd6431aa9abb7e02c98ebe5e881d7f9..f8288fa42f148651fd729dbce111c6c4151fe2b0 100644
--- a/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
+++ b/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
@@ -53,8 +53,10 @@ void ExtensionsGuestViewManagerDelegate::DispatchEvent(
   // extensions::events::HistogramValue as an argument.
   events::HistogramValue histogram_value =
       guest_view_events::GetEventHistogramValue(event_name);
+#ifdef MUON_CHROMIUM_BUILD
   DCHECK_NE(events::UNKNOWN, histogram_value) << "Event " << event_name
                                               << " must have a histogram value";
+#endif

   content::WebContents* owner = guest->owner_web_contents();
   if (!owner)
diff --git a/extensions/common/api/_api_features.json b/extensions/common/api/_api_features.json
index 808d9791674f0a16674ab2cc5dc9d8fd82b82b7f..08bb4270b742ea5c467f007ec01a0d2721c5fe8a 100644
--- a/extensions/common/api/_api_features.json
+++ b/extensions/common/api/_api_features.json
@@ -177,7 +177,10 @@
     {
       "internal": true,
       "channel": "stable",
-      "contexts": ["blessed_extension"]
+      "contexts": ["blessed_extension", "webui"],
+      "matches": [
+        "chrome://brave/*"
+      ]
     }, {
       "internal": true,
       "channel": "trunk",
@@ -508,6 +511,7 @@
     "internal": true,
     "contexts": ["webui"],
     "matches": [
+      "chrome://brave/*",
       "chrome://chrome-signin/*",
       "chrome://media-router/*",
       "chrome://oobe/*"
@@ -526,6 +530,13 @@
       "chrome://media-router/*",
       "chrome://oobe/*"
     ]
+  }, {
+    "internal": true,
+    "channel": "stable",
+    "contexts": ["webui"],
+    "matches": [
+      "chrome://brave/*"
+    ]
   }],
   "webViewRequest": [{
     "dependencies": ["permission:webview"],
@@ -534,6 +545,7 @@
     "channel": "stable",
     "contexts": ["webui"],
     "matches": [
+      "chrome://brave/*",
       "chrome://chrome-signin/*",
       "chrome://media-router/*",
       "chrome://oobe/*"
diff --git a/extensions/renderer/resources/guest_view/guest_view_container.js b/extensions/renderer/resources/guest_view/guest_view_container.js
index 2ef77f4f6359618be7b37d0804a77dd4883dbc06..47f9059b1819810fc4284a9d63aae1d8c658431f 100644
--- a/extensions/renderer/resources/guest_view/guest_view_container.js
+++ b/extensions/renderer/resources/guest_view/guest_view_container.js
@@ -26,6 +26,7 @@ function GuestViewContainer(element, viewType) {
   privates(this).internalElement = this.createInternalElement$();
   this.setupFocusPropagation();
   var shadowRoot = this.element.createShadowRoot();
+  shadowRoot.innerHTML = '<style>:host { display: flex; }</style>'
   shadowRoot.appendChild(privates(this).internalElement);

   GuestViewInternalNatives.RegisterView(this.viewInstanceId, this, viewType);
@@ -209,8 +210,9 @@ function registerInternalElement(viewType) {
   proto.createdCallback = function() {
     this.setAttribute('type', 'application/browser-plugin');
     this.setAttribute('id', 'browser-plugin-' + IdGenerator.GetNextId());
-    this.style.width = '100%';
-    this.style.height = '100%';
+    // this.style.width = '100%';
+    // this.style.height = '100%';
+    this.style.flex = '1 1 auto';
   };

   proto.attachedCallback = function() {
diff --git a/gin/object_template_builder.h b/gin/object_template_builder.h
index bf0ece1e723ba1a0644961cfd3a01ce3c14c892a..5e7d3dbb9da51a5abb0447bc04c90c9bee6b9324 100644
--- a/gin/object_template_builder.h
+++ b/gin/object_template_builder.h
@@ -26,7 +26,7 @@ template<typename T, typename Enable = void>
 struct CallbackTraits {
   static v8::Local<v8::FunctionTemplate> CreateTemplate(v8::Isolate* isolate,
                                                          T callback) {
-    return CreateFunctionTemplate(isolate, base::Bind(callback));
+    return gin::CreateFunctionTemplate(isolate, base::Bind(callback));
   }
   static void SetAsFunctionHandler(v8::Isolate* isolate,
                                    v8::Local<v8::ObjectTemplate> tmpl,
@@ -40,7 +40,7 @@ template<typename T>
 struct CallbackTraits<base::Callback<T> > {
   static v8::Local<v8::FunctionTemplate> CreateTemplate(
       v8::Isolate* isolate, const base::Callback<T>& callback) {
-    return CreateFunctionTemplate(isolate, callback);
+    return gin::CreateFunctionTemplate(isolate, callback);
   }
   static void SetAsFunctionHandler(v8::Isolate* isolate,
                                    v8::Local<v8::ObjectTemplate> tmpl,
@@ -59,7 +59,7 @@ struct CallbackTraits<
     typename std::enable_if<std::is_member_function_pointer<T>::value>::type> {
   static v8::Local<v8::FunctionTemplate> CreateTemplate(v8::Isolate* isolate,
                                                          T callback) {
-    return CreateFunctionTemplate(isolate, base::Bind(callback),
+    return gin::CreateFunctionTemplate(isolate, base::Bind(callback),
                                   HolderIsFirstArgument);
   }
   static void SetAsFunctionHandler(v8::Isolate* isolate,
diff --git a/gpu/config/BUILD.gn b/gpu/config/BUILD.gn
index b579142188dcd66cbfda91f60dbce0f37f097d73..e1e6ec4d73196c593d968afdc6a35bb11d158b43 100644
--- a/gpu/config/BUILD.gn
+++ b/gpu/config/BUILD.gn
@@ -7,11 +7,12 @@ import("//build/config/chromecast_build.gni")
 import("//build/config/ui.gni")

 declare_args() {
-  # Use the PCI lib to collect GPU information on Linux.
-  use_libpci = is_linux && (!is_chromecast || is_cast_desktop_build) &&
-               (use_x11 || use_ozone)
 }

+# Use the PCI lib to collect GPU information on Linux.
+use_libpci = is_linux && (!is_chromecast || is_cast_desktop_build) &&
+             (use_x11 || use_ozone)
+
 group("config") {
   if (is_component_build) {
     public_deps = [
diff --git a/net/http/http_util.cc b/net/http/http_util.cc
index 62bed8c449c09098bd5d703be0a7172066d2050d..04908f9c562f836b5fe5acd64d6c2d9acd67825d 100644
--- a/net/http/http_util.cc
+++ b/net/http/http_util.cc
@@ -57,8 +57,8 @@ static size_t FindStringEnd(const std::string& line, size_t start, char delim) {
 // static
 std::string HttpUtil::SpecForRequest(const GURL& url) {
   // We may get ftp scheme when fetching ftp resources through proxy.
-  DCHECK(url.is_valid() && (url.SchemeIsHTTPOrHTTPS() || url.SchemeIs("ftp") ||
-                            url.SchemeIsWSOrWSS()));
+  // DCHECK(url.is_valid() && (url.SchemeIsHTTPOrHTTPS() || url.SchemeIs("ftp") ||
+  //                           url.SchemeIsWSOrWSS()));
   return SimplifyUrlForRequest(url).spec();
 }

diff --git a/net/url_request/url_request_job.h b/net/url_request/url_request_job.h
index 2341999ae5493b1e205343963b41d8cbc68549de..25552307f59d70dbc9484a0edb241c21e0b67ebd 100644
--- a/net/url_request/url_request_job.h
+++ b/net/url_request/url_request_job.h
@@ -269,6 +269,7 @@ class NET_EXPORT URLRequestJob : public base::PowerObserver {
   void OnCallToDelegate();
   void OnCallToDelegateComplete();

+public:
   // Called to read raw (pre-filtered) data from this Job. Reads at most
   // |buf_size| bytes into |buf|.
   // Possible return values:
diff --git a/third_party/WebKit/Source/core/dom/DOMArrayBuffer.h b/third_party/WebKit/Source/core/dom/DOMArrayBuffer.h
index 5ce8c463774ba8bb69566ddabf49501e8a0ca9a4..a92b6f344d86fc8b125129cbdaea94d308eb1934 100644
--- a/third_party/WebKit/Source/core/dom/DOMArrayBuffer.h
+++ b/third_party/WebKit/Source/core/dom/DOMArrayBuffer.h
@@ -28,6 +28,10 @@ class CORE_EXPORT DOMArrayBuffer final : public DOMArrayBufferBase {
   static DOMArrayBuffer* create(WTF::ArrayBufferContents& contents) {
     return create(WTF::ArrayBuffer::create(contents));
   }
+  static DOMArrayBuffer* createExternal(void* source, unsigned byteLength)
+  {
+    return new DOMArrayBuffer(source, byteLength);
+  }

   // Only for use by XMLHttpRequest::responseArrayBuffer and
   // Internals::serializeObject.
@@ -47,6 +51,8 @@ class CORE_EXPORT DOMArrayBuffer final : public DOMArrayBufferBase {
  private:
   explicit DOMArrayBuffer(PassRefPtr<WTF::ArrayBuffer> buffer)
       : DOMArrayBufferBase(std::move(buffer)) {}
+  DOMArrayBuffer(void* source, unsigned byteLength)
+      : DOMArrayBufferBase(source, byteLength) {}
 };

 }  // namespace blink
diff --git a/third_party/WebKit/Source/core/dom/DOMArrayBufferBase.h b/third_party/WebKit/Source/core/dom/DOMArrayBufferBase.h
index 74738dade2b75b3659e21f2cf97f4a3cfd0d477e..115e410ea378654673dd8295b23d14ec68f8f825 100644
--- a/third_party/WebKit/Source/core/dom/DOMArrayBufferBase.h
+++ b/third_party/WebKit/Source/core/dom/DOMArrayBufferBase.h
@@ -21,9 +21,24 @@ class CORE_EXPORT DOMArrayBufferBase
   const WTF::ArrayBuffer* buffer() const { return m_buffer.get(); }
   WTF::ArrayBuffer* buffer() { return m_buffer.get(); }

-  const void* data() const { return buffer()->data(); }
-  void* data() { return buffer()->data(); }
-  unsigned byteLength() const { return buffer()->byteLength(); }
+  const void* data() const {
+    if (m_isExternal)
+      return m_source;
+    else
+      return buffer()->data();
+  }
+  void* data() {
+    if (m_isExternal)
+      return m_source;
+    else
+      return buffer()->data();
+  }
+  unsigned byteLength() const {
+      if (m_isExternal)
+          return m_byteLength;
+      else
+          return buffer()->byteLength();
+  }
   bool transfer(WTF::ArrayBufferContents& result) {
     return buffer()->transfer(result);
   }
@@ -43,11 +58,26 @@ class CORE_EXPORT DOMArrayBufferBase

  protected:
   explicit DOMArrayBufferBase(PassRefPtr<WTF::ArrayBuffer> buffer)
-      : m_buffer(buffer) {
+      : m_buffer(buffer),
+        m_isExternal(false),
+        m_source(nullptr),
+        m_byteLength(0)
+  {
     DCHECK(m_buffer);
   }

+  DOMArrayBufferBase(void* source, unsigned byteLength)
+      : m_buffer(WTF::ArrayBuffer::create(source, byteLength)),
+        m_isExternal(true),
+        m_source(source),
+        m_byteLength(byteLength)
+  {
+  }
+
   RefPtr<WTF::ArrayBuffer> m_buffer;
+  bool m_isExternal;
+  void* m_source;
+  unsigned m_byteLength;
 };

 }  // namespace blink
diff --git a/third_party/WebKit/Source/core/editing/EditingBehavior.h b/third_party/WebKit/Source/core/editing/EditingBehavior.h
index 3f098ef2b9b425d2964ab563ce1bbfc56ad2fd22..d18d78f20fa745a17f0b3d1ba17102a308ff8f11 100644
--- a/third_party/WebKit/Source/core/editing/EditingBehavior.h
+++ b/third_party/WebKit/Source/core/editing/EditingBehavior.h
@@ -42,7 +42,7 @@ class CORE_EXPORT EditingBehavior {
   // area, maintain the horizontal position on Windows and Android but extend it
   // to the boundary of the editable content on Mac and Linux.
   bool shouldMoveCaretToHorizontalBoundaryWhenPastTopOrBottom() const {
-    return m_type != EditingWindowsBehavior && m_type != EditingAndroidBehavior;
+    return false;
   }

   bool shouldSelectReplacement() const {
diff --git a/third_party/WebKit/Source/core/fileapi/File.idl b/third_party/WebKit/Source/core/fileapi/File.idl
index df954bc8f81850101676b1c20f688ba0ba6b4b09..4683b2853bb467ec9f58616ede207d456f4112ec 100644
--- a/third_party/WebKit/Source/core/fileapi/File.idl
+++ b/third_party/WebKit/Source/core/fileapi/File.idl
@@ -32,6 +32,7 @@
     Exposed=(Window,Worker),
 ] interface File : Blob {
     readonly attribute DOMString name;
+    readonly attribute DOMString path;
     readonly attribute long long lastModified;

     // Non-standard APIs
diff --git a/third_party/WebKit/Source/web/WebArrayBuffer.cpp b/third_party/WebKit/Source/web/WebArrayBuffer.cpp
index 271ec5391d8a9a478f36da58f1b539963cf39724..cd0fcf8bec875485097560c9c8231ad013cc0a96 100644
--- a/third_party/WebKit/Source/web/WebArrayBuffer.cpp
+++ b/third_party/WebKit/Source/web/WebArrayBuffer.cpp
@@ -39,6 +39,11 @@ WebArrayBuffer WebArrayBuffer::create(unsigned numElements,
   return WebArrayBuffer(DOMArrayBuffer::create(numElements, elementByteSize));
 }

+WebArrayBuffer WebArrayBuffer::createExternal(void* source, unsigned byteLength)
+{
+  return WebArrayBuffer(DOMArrayBuffer::createExternal(source, byteLength));
+}
+
 void WebArrayBuffer::reset() {
   m_private.reset();
 }
diff --git a/third_party/WebKit/public/BUILD.gn b/third_party/WebKit/public/BUILD.gn
index 2f1c3c2c7e7b85a521b3aa4d951f74ff269af824..d34d3650f7a51470510f14bd03163a2d0bd928fd 100644
--- a/third_party/WebKit/public/BUILD.gn
+++ b/third_party/WebKit/public/BUILD.gn
@@ -647,7 +647,11 @@ grit("image_resources") {
 }

 mojom("mojo_bindings") {
-  visibility = [ "//content/*" ]
+  visibility = [
+    "//content/*",
+    "//electron/atom/common/*",
+    "//electron/atom/app/*",
+  ]
   visibility_blink = [
     "//content/common:mojo_bindings_blink",
     "//third_party/WebKit/Source/platform",
diff --git a/third_party/WebKit/public/web/WebArrayBuffer.h b/third_party/WebKit/public/web/WebArrayBuffer.h
index 6acdddff8c59f63214fb6267a562f6ac8a2b5296..7a1097d9538981c6b8f8928796dba0b1a91c7c52 100644
--- a/third_party/WebKit/public/web/WebArrayBuffer.h
+++ b/third_party/WebKit/public/web/WebArrayBuffer.h
@@ -51,6 +51,8 @@ class WebArrayBuffer {

   BLINK_EXPORT static WebArrayBuffer create(unsigned numElements,
                                             unsigned elementByteSize);
+  BLINK_EXPORT static WebArrayBuffer createExternal(void* source,
+                                                    unsigned byteLength);

   BLINK_EXPORT void reset();
   BLINK_EXPORT void assign(const WebArrayBuffer&);
diff --git a/third_party/boringssl/BUILD.generated.gni b/third_party/boringssl/BUILD.generated.gni
index 2371143308776a7323fe27b0ab20f7c2444d1047..f59124a08627da270e546dcc7119020f06e985f2 100644
--- a/third_party/boringssl/BUILD.generated.gni
+++ b/third_party/boringssl/BUILD.generated.gni
@@ -417,6 +417,24 @@ ssl_sources = [
   "src/ssl/tls_record.c",
 ]

+decrepit_sources = [
+  "src/decrepit/bio/base64_bio.c",
+  "src/decrepit/blowfish/blowfish.c",
+  "src/decrepit/cast/cast.c",
+  "src/decrepit/cast/cast_tables.c",
+  "src/decrepit/des/cfb64ede.c",
+  "src/decrepit/dh/dh_decrepit.c",
+  "src/decrepit/dsa/dsa_decrepit.c",
+  "src/decrepit/evp/dss1.c",
+  "src/decrepit/evp/evp_do_all.c",
+  "src/decrepit/rc4/rc4_decrepit.c",
+  "src/decrepit/ripemd/ripemd.c",
+  "src/decrepit/rsa/rsa_decrepit.c",
+  "src/decrepit/ssl/ssl_decrepit.c",
+  "src/decrepit/x509/x509_decrepit.c",
+  "src/decrepit/xts/xts.c",
+]
+
 crypto_sources_linux_aarch64 = [
   "linux-aarch64/crypto/aes/aesv8-armx64.S",
   "linux-aarch64/crypto/bn/armv8-mont.S",
diff --git a/third_party/boringssl/BUILD.gn b/third_party/boringssl/BUILD.gn
index abe39b229b2da1842b808db8b8ff8fc91c402b75..a5758550b8a7b726d78ca647515168fc353fc05a 100644
--- a/third_party/boringssl/BUILD.gn
+++ b/third_party/boringssl/BUILD.gn
@@ -41,7 +41,7 @@ config("no_asm_config") {
   defines = [ "OPENSSL_NO_ASM" ]
 }

-all_sources = crypto_sources + ssl_sources
+all_sources = crypto_sources + ssl_sources + decrepit_sources

 # Windows' assembly is built with Yasm. The other platforms use the platform
 # assembler.
diff --git a/third_party/widevine/cdm/BUILD.gn b/third_party/widevine/cdm/BUILD.gn
index dda97991ca4b0c533ae7a5830d9e9d9195a86811..a3094f497de5f30edffbce3138bdfee763f0c605 100644
--- a/third_party/widevine/cdm/BUILD.gn
+++ b/third_party/widevine/cdm/BUILD.gn
@@ -113,9 +113,10 @@ if (widevine_cdm_binary_files != []) {
     if (is_mac) {
       ldflags = [
         # Not to strip important symbols by -Wl,-dead_strip.
-        "-Wl,-exported_symbol,_PPP_GetInterface",
-        "-Wl,-exported_symbol,_PPP_InitializeModule",
-        "-Wl,-exported_symbol,_PPP_ShutdownModule",
+        # "-Wl,-exported_symbol,_PPP_GetInterface",
+        # "-Wl,-exported_symbol,_PPP_InitializeModule",
+        # "-Wl,-exported_symbol,_PPP_ShutdownModule",
+        "-Wl,-install_name,@loader_path/libwidevinecdm.dylib",
       ]
       #TODO(jrummell) Mac: 'DYLIB_INSTALL_NAME_BASE': '@loader_path',
     } else if (is_posix && !is_mac) {
